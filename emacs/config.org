* General UI settings 

** Do not show startup screen

#+begin_src emacs-lisp

(setq inhibit-startup-message t)

#+end_src

** Launch emacs in maximum window

Put the following in ~/.emacs.d/init.el:

#+begin_src emacs-lisp
(add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+end_src

** Disable tool bar, menu bar and scroll bar

#+begin_src emacs-lisp

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)

#+end_src

** Line number configuration

#+begin_src emacs-lisp

;; Highlight current line
(global-hl-line-mode t)
;; Enable line numbers
(global-display-line-numbers-mode t)
;; Set relative line numbers
(setq display-line-numbers-type 'relative)

#+end_src

** Disable bell sound

#+begin_src emacs-lisp

(setq ring-bell-function 'ignore)

#+end_src
(setq command-line-default-directory "~/")
#+end_src
** Set default fill-column
#+begin_src emacs-lisp
(setq-default fill-column 79)
#+end_src
** Set back up folders for emacs files (files with ~)
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
#+end_src
* Package management

** Add MELPA to package archives

#+begin_src emacs-lisp

(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")
	("nongnu" . "https://elpa.nongnu.org/nongnu/")
        ;; ("org" . "http://orgmode.org/elpa/")
	))
(package-initialize)

#+end_src

** Install use-package for easy package installation

#+begin_src emacs-lisp

(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

#+end_src

** Use Delight to hide modes from modeline bar

#+begin_src emacs-lisp

(use-package delight
  :ensure t)

#+end_src

* Themes

** General theme


#+begin_src emacs-lisp

(use-package doom-themes
  :ensure t
  :init
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (load-theme 'doom-one t))  ;; Ones I liked and used: doom-one, doom-dark+

#+end_src
** Doom modeline 
This package depends on all-the-icons package. When installing Doom
modeline for the first time, please run 'all-the-icons-install-fonts'
via M-x first.
#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+end_src

Ensure icons are used in Daemon mode:

#+begin_src emacs-lisp

(add-hook 'server-after-make-frame-hook
 (lambda ()
     (setq doom-modeline-icon (display-graphic-p))))

#+end_src
* Emacs UI and menu enhancements
** Which key
Which key adds a guiding menu for keybindings
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :init
  (setq which-key-idle-delay 0.5)
  :config (which-key-mode))
#+end_src
** Ivy, Counsel and Swiper
Ivy is a customisable completion mechanism. Counsel contains a collection of
Ivy-enhanced versions of command Emacs commands (e.g. M-x). Swiper as an
Ivy-enhanced version of Isearch.
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :delight
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
  :ensure t
  :after ivy
  :config (counsel-mode 1))

(use-package swiper
  :ensure t
  :after ivy)

(use-package ivy-xref
  :ensure t
  :init
  ;; xref initialization is different in Emacs 27 - there are two different
  ;; variables which can be set rather than just one
  (when (>= emacs-major-version 27)
    (setq xref-show-definitions-function #'ivy-xref-show-defs))
  ;; Necessary in Emacs <27. In Emacs 27 it will affect all xref-based
  ;; commands other than xref-find-definitions (e.g. project-find-regexp)
  ;; as well
  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

;; Ivy rich to add description to M-x and other menus
(use-package ivy-rich
  :ensure t
  :delight
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
			  ivy-rich-switch-buffer-align-virtual-buffer t
			  ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
(ivy-rich-mode 1)
(setq ivy-initial-inputs-alist nil) ; Remove the ^ in ivy buffers
					; Smex to allow M-x remember our history
(use-package smex :ensure t)
(smex-initialize)
#+end_src

** Helpful

Helpful package for more helpful descriptions of functions, commands and
variables.

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Hydra
#+begin_src emacs-lisp
(use-package hydra
  :ensure t)
#+end_src
* Project management

** Magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+end_src

** Smerge

To resolve merge conflicts.

#+begin_src emacs-lisp
  (defhydra activate-smerge-mode ()
    "Smerge mode"
    ("j" smerge-next "next")
    ("k" smerge-prev "prev")
    ("u" smerge-keep-upper "keep upper")
    ("l" smerge-keep-lower "keep lower")
    ("c" smerge-keep-current "keep current")
    ("h" smerge-refine "highlight")
    ("d" smerge-kill-current "delete current")
    ("a" smerge-keep-all "keep all")
    ("b" smerge-keep-base "keep base")
    ("q" nil "quit"))
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :delight projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/PythonProjects")
    (setq projectile-project-search-path '("~/PythonProjects")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :ensure t
  :after projectile)

(use-package projectile
  :ensure t
  :delight projectile-mode
  :hook
  (after-init . projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/PythonProjects")
    (setq projectile-project-search-path '("~/PythonProjects")))
  (setq projectile-switch-project-action #'projectile-dired)
  :custom
  (projectile-completion-system 'ivy)
  (projectile-dynamic-mode-line nil)
  (projectile-enable-caching t)
  (projectile-indexing-method 'hybrid)
  (projectile-track-known-projects-automatically nil))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** prescient

#+begin_src emacs-lisp
(use-package ivy-prescient
  :ensure t
  :after counsel
  :init
  (ivy-prescient-mode)
  (prescient-persist-mode)
  )
(use-package prescient
  :ensure t
  :delight
  :config
  )
#+end_src

** Treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t)
#+end_src

* Other useful packages
** Command log mode to show keypress and command
Related commands start with "clm" in the M-x menu
#+begin_src emacs-lisp
(use-package command-log-mode
  :ensure t)
#+end_src
** Yasnippet

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :ensure t)

(use-package yasnippet
  :ensure t
  :delight yas-minor-mode
  :config
    (yas-reload-all)
)
#+end_src

** Eldoc

#+begin_src emacs-lisp
(use-package eldoc
  :ensure t
  :delight eldoc-mode
  )
#+end_src

** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src

* Window management
** Winum
#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :config (progn
	    (setq winum-scope 'frame-local
		  winum-reverse-frame-list nil
		  winum-auto-setup-setup-mode-line nil
		  winum-ignored-buffers '(" *which-key*"))
	    (winum-mode)))
#+end_src
** Function to interactivel resize window
#+begin_src emacs-lisp
(defhydra hydra-window-resize ()
  "Resize window"
  ("h" shrink-window-horizontally "shrink horizontally")
  ("l" enlarge-window-horizontally "enlarge horizontally")
  ("j" shrink-window "shrink vertically")
  ("k" enlarge-window "enlarge vertically")
  ("b" balance-windows "reset sizes")
  ("q" nil "quit"))
#+end_src

* File management

** Dired

#+begin_src emacs-lisp

(use-package dired
  :after evil evil-collection
  ;; :commands (dired dired-jump)
  ;; :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-hide-dotfiles
  :ensure t
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

*** Mac specific settings

OS X's ls function does not support the --group-directories-first switch. In order to enable this, install GNU core utils:

#+begin_src shell

brew install coreutils

#+end_src

Then the emacs-lisp code below ensures that dired uses the gls (GNU ls) command:

#+begin_src emacs-lisp

(when (string= system-type "darwin")
  (setq dired-use-ls-dired t
        insert-directory-program "/usr/local/bin/gls"))

#+end_src
* Keybindings
** Evil mode
The Evil package(s) enable Vim-like keybindings
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode)
  ;; Use visual line motions (e.g. for when a long line is wrapped)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))
#+end_src

Evil collection is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-collection-mode-list '(vterm dashboard dired ibuffer magit pdf doc-view company)) ; Modes to activate Evil keybindings for
  (evil-collection-init))
#+end_src

Bind jk in insert mode to ESC.

#+begin_src emacs-lisp
(use-package key-chord
  :ensure t
  :init
  (setq key-chord-two-keys-delay 0.2)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-mode 1))
#+end_src

Evil nerd commenter for line comment.

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

Evil-org adds evil bindings to org-agenda.

#+begin_src emacs-lisp

(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

#+end_src
** Undo tree
Enable Vim-like undo/redo
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))
#+end_src

** Bindings with SPC prefix
The config in this section enable SPC as a prefix to a useful and commonly used
function (similar to Spacemacs/Doom/VSpaceCode).

*** General package 
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :init
  (setq general-override-states '(insert
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer leader-keys
    :states '(normal visual emacs motion) ; consider adding motion for using with easymotion
    :keymaps 'override 
    :prefix "SPC")
  (general-create-definer local-leader-keys
    :states '(normal visual emacs motion) ; consider adding motion for using with easymotion
    :keymaps 'override 
    :prefix "SPC m")
  )
#+end_src

*** Buffer management
Add function to kill all buffers except current one.
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

Keybindings for buffer management.
#+begin_src emacs-lisp
(leader-keys
  "TAB"   '(counsel-switch-buffer :which-key "Switch buffer")
  "b"     '(:ignore t :which-key "Buffer")
  "b b"   '(ibuffer :which-key "Ibuffer")
  "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
  "b k"   '(kill-current-buffer :which-key "Kill current buffer")
  "b n"   '(next-buffer :which-key "Next buffer")
  "b p"   '(previous-buffer :which-key "Previous buffer")
  "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
  "b K"   '(kill-buffer :which-key "Kill buffer")
  "b 1"   '(kill-other-buffers :which-key "Kill other buffers"))
#+end_src
*** File management
#+begin_src emacs-lisp
(leader-keys
  "f"     '(:ignore t :which-key "File")
  "."     '(find-file :which-key "Find file")
  "f f"   '(find-file :which-key "Find file")
  "f r"   '(counsel-recentf :which-key "Recent files")
  "f s"   '(save-buffer :which-key "Save file")
  "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
  "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
  "f C"   '(copy-file :which-key "Copy file")
  "f D"   '(delete-file :which-key "Delete file")
  "f R"   '(rename-file :which-key "Rename file")
  "f S"   '(write-file :which-key "Save file as...")
  ;; "f d"   '(:ignore t :which-key "Dired")
  "d"     '(dired :which-key "Dired")
  ;; "f d d" '(dired :which-key "Dired")
  "f j"   '(dired-jump :which-key "Dired jump")
  ;; "f d j" '(dired-jump :which-key "Dired jump")
  "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src
*** Window management
#+begin_src emacs-lisp
(winner-mode 1)
(leader-keys
  ;; Window splits
  "w"     '(:ignore t :which-key "Window")
  "w c"   '(evil-window-delete :which-key "Close window")
  "w n"   '(evil-window-new :which-key "New window")
  "w s"   '(evil-window-split :which-key "Horizontal split window")
  "w v"   '(evil-window-vsplit :which-key "Vertical split window")
  "w C"   '(delete-other-windows :which-key "Close other windows")
  "w r"   '(hydra-window-resize/body :which-key "Resize window")
  ;; Window motions
  "w h"   '(evil-window-left :which-key "Window left")
  "w j"   '(evil-window-down :which-key "Window down")
  "w k"   '(evil-window-up :which-key "Window up")
  "w l"   '(evil-window-right :which-key "Window right")
  "w w"   '(evil-window-next :which-key "Goto next window")
  ;; winner mode
  "w <left>"  '(winner-undo :which-key "Winner undo")
  "w <right>" '(winner-redo :which-key "Winner redo")
  ;; Window numbers
  "1" '(winum-select-window-1 :which-key "Select window 1")
  "2" '(winum-select-window-2 :which-key "Select window 2")
  "3" '(winum-select-window-3 :which-key t)
  "4" '(winum-select-window-4 :which-key t)
  "5" '(winum-select-window-5 :which-key t)
  "6" '(winum-select-window-6 :which-key t)
  "7" '(winum-select-window-7 :which-key t)
  "8" '(winum-select-window-8 :which-key t))
#+end_src
*** Git
#+begin_src emacs-lisp
(leader-keys
  "g"   '(:ignore t :which-key "Git")
  "g s" '(magit :which-key "Magit status")
  "g m"   '(activate-smerge-mode/body :which-key "Smerge"))
#+end_src
*** General text bindings
#+begin_src emacs-lisp
(leader-keys
  "x"   '(:ignore t :which-key "Text")
  "x i" '(indent-region :which-key "Indent region")
  "x s" '(flyspell-correct-wrapper :which-key "Flyspell correct")
  ";"   '(evilnc-comment-or-uncomment-lines :which-key "Toggle line comment"))
#+end_src
*** Easymotion

#+begin_src emacs-lisp

(use-package evil-easymotion
  :ensure t
  :after (general evil)
  :general
  (leader-keys
    "j"   '(:ignore t :which-key "Jump to")
    "j f" '(evilem-motion-find-char :which-key "Find char")
    "j F" '(evilem-motion-find-char-backward :which-key "Find char backward")
    "j j" '(evilem-motion-find-char :which-key "Find char")
    "j J" '(evilem-motion-find-char-backward :which-key "Find char backward")
    "j t" '(evilem-motion-find-char-to :which-key "To char")
    "j T" '(evilem-motion-find-char-to-backward :which-key "To char backward")
    "j l" '(evilem-motion-next-line :which-key "Jump to line forward")
    "j L" '(evilem-motion-previous-line :which-key "Jump to line backward")
    "j e" '(evilem-motion-forward-word-end :which-key "Forward word end")
    "j E" '(evilem-motion-forward-WORD-end :which-key "Forward WORD end")
    "j g e" '(evilem-motion-backward-word-end :which-key "Backward word end")
    "j g E" '(evilem-motion-backward-WORD-end :which-key "Backward WORD end")
    "j w" '(evilem-motion-forward-word-begin :which-key "Forward word")
    "j W" '(evilem-motion-forward-WORD-begin :which-key "Forward WORD")
    "j b" '(evilem-motion-backward-word-begin :which-key "Backward word")
    "j B" '(evilem-motion-backward-WORD-begin :which-key "Backward WORD")
    "j n" '(evilem-motion-search-next :which-key "Search next")
    "j N" '(evilem-motion-search-previous :which-key "Search previous")
    "j g" '(:ignore t :which-key "Backward word end")))

#+end_src

*** evil-snipe

evil-snipe is simulates Vim sneak.

#+begin_src emacs-lisp

(use-package evil-snipe
  :ensure t
  :init
  (evil-normalize-keymaps)
  :after evil
  ;; :general
  ;; (general-vmap evil-snipe-local-mode-map "z" 'evil-snipe-s)
  ;; (general-vmap 'visual evil-snipe-local-mode-map "Z" 'evil-snipe-S)
  :hook (magit-mode . turn-off-evil-snipe-override-mode)
  :custom
  (evil-snipe-scope 'visible)
  (evil-snipe-repeat-scope 'whole-visible)
  (evil-snipe-spillover-scope 'whole-buffer))

(evil-snipe-mode +1)
(evil-snipe-override-mode +1)

#+end_src

*** evil-surround

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

*** Eval
#+begin_src emacs-lisp
(leader-keys
  "e"     '(:ignore t :which-key "Eval")
  "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
  "e d"   '(eval-defun :which-key "Eval defun")
  "e e"   '(eval-expression :which-key "Eval elisp expression")
  "e l"   '(eval-last-sexp :which-key "Eval last sexression")
  "e r"   '(eval-region :which-key "Eval region"))
#+end_src
*** Org mode
#+begin_src emacs-lisp

(leader-keys
  "o"   '(:ignore t :which-key "Org")
  "a"   '(org-agenda :which-key "Agenda")
  "c"   '(org-capture :which-key "Capture")
  "o a" '(org-agenda :which-key "Agenda")
  "o c" '(org-capture :which-key "Capture")
  "o t" '(org-todo :which-key "Todo"))
#+end_src
* Shells and terminals

** exec-path-from-shell

Ensures $PATH environment variable in emacs is the same as main shell (zshrc for my macbook).

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t)

(exec-path-from-shell-initialize)

#+end_src

** Eshell

#+begin_src emacs-lisp

(defun configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-a") 'eshell-bol)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-e") 'eshell-show-maximum-output)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-u") 'eshell-kill-input)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :ensure t
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))

#+end_src
*** Custom prompt

See also [[http://www.modernemacs.com/post/custom-eshell/][here]].

An alternative can be found [[https://marcohassan.github.io/bits-of-experience/pages/emacs/][here]]. I used this at NatWest (WSL emacs setup) as the icons did not show up correctly.

**** Macros and functions

Define a macro esh-section taking a name, an icon, a form or variable to be
evaluated, and optionally face properties. They create anonymous functions
which will be evaluated and concatenated at prompt-time.

#+begin_src emacs-lisp

(require 'dash)
(require 's)
;; (require 'cl)

;; (use-package dash
;;   :ensure t)

;; (use-package s
;;   :ensure t)

(defmacro with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))

(defmacro esh-section (NAME ICON FORM &rest PROPS)
  "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
  `(setq ,NAME
         (lambda () (when ,FORM
                      (-> ,ICON
                          (concat esh-section-delim ,FORM)
                          (with-face ,@PROPS))))))

(defun esh-acc (acc x)
  "Accumulator for evaluating and concatenating esh-sections."
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  "Build `eshell-prompt-function'"
  (concat esh-header
          (-reduce-from 'esh-acc "" eshell-funcs)
          "\n"
          eshell-prompt-string))

#+end_src

**** Configuration

#+begin_src emacs-lisp

;; Separator between esh-sections
(setq esh-sep " | ")  ; or " | "

;; Separator between an esh-section icon and form
(setq esh-section-delim " ")

;; Eshell prompt header
(setq esh-header "\n┌─")  ; or "\n┌─"

;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
;; your login, these can be the same.
(setq eshell-prompt-regexp "└─> ")   ; or "└─> "
(setq eshell-prompt-string "└─> ")   ; or "└─> "

#+end_src

**** Sections

#+begin_src emacs-lisp

(esh-section esh-dir
             "\xf07b" ;; "\xf07c"  ;  (faicon folder)
             (abbreviate-file-name (eshell/pwd))
             '(:foreground "gold"))

(esh-section esh-git
             "\xe907"  ;  (git icon)
             (magit-get-current-branch)
             '(:foreground "orange"))

(esh-section esh-python
             "\xe928"  ;  (python icon)
             conda-env-current-name)

(esh-section esh-clock
             "\xf017"  ;  (clock icon)
             (format-time-string "%H:%M" (current-time))
             '(:foreground "forest green"))

;; Below I implement a "prompt number" section
;; (setq esh-prompt-num 0)
;; (add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
;; (advice-add 'eshell-send-input :before
;;             (lambda (&rest args) (setq esh-prompt-num (cl-incf esh-prompt-num))))

;; (esh-section esh-num
;;              "\xf0c9"  ;  (list icon)
;;              (number-to-string esh-prompt-num)
;;              '(:foreground "brown"))

;; Choose which eshell-funcs to enable
(setq eshell-funcs (list esh-dir esh-git esh-python)) ; esh-clock esh-num))

;; Enable the new eshell prompt
(setq eshell-prompt-function 'esh-prompt-func)

#+end_src

** Function to disable exit confirmation query for shells and terminals
#+begin_src emacs-lisp
(defun set-no-process-query-on-exit ()
  (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
      (set-process-query-on-exit-flag proc nil))))
#+end_src
** Settings for shell-mode-hook and term-mode-hook
Disable line numbers, line highlight and exit confirmation
#+begin_src emacs-lisp
(dolist (mode '(term-mode-hook
		shell-mode-hook
		vterm-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0)))
  (add-hook mode (lambda () (setq-local global-hl-line-mode nil)))
  (add-hook mode 'set-no-process-query-on-exit))
#+end_src
* Org mode

** Org made basic setup

#+begin_src emacs-lisp

(use-package org
  :ensure org-contrib
  :mode ("\\.org\\'" . org-mode)
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c b" . org-iswitchb)
   ("C-c c" . org-capture))
  :bind
  (:map org-mode-map
        ("M-n" . outline-next-visible-heading)
        ("M-p" . outline-previous-visible-heading))
  :custom
  (org-src-window-setup 'current-window)
  (org-return-follows-link t)
  (org-agenda-diary-file "~/org/diary.org")
  (org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (dot . t)
     (jupyter .t)
     (R . t)))
  (org-confirm-babel-evaluate nil)
  (org-use-speed-commands t)
  (org-catch-invisible-edits 'show)
  (org-ellipsis " ▼ ")
  (org-src-fontify-natively t)
  (org-edit-src-content-indentation 0)
  ;; (org-preview-latex-image-directory "/tmp/ltximg/")
  :custom-face
  (variable-pitch ((t (:family "Libre Baskerville"))))
  (org-document-title ((t (:weight bold :height 1.5))))
  (org-done ((t (:strike-through t :weight bold))))
  (org-headline-done ((t (:strike-through t))))
  (org-level-1 ((t (:height 1.3 :weight bold))))
  (org-level-2 ((t (:height 1.2 :weight bold))))
  (org-level-3 ((t (:height 1.1 :weight bold))))
  (org-image-actual-width (/ (display-pixel-width) 2))
  :custom
  (org-structure-template-alist '(("a" . "export ascii")
                                  ("c" . "center")
                                  ("C" . "comment")
                                  ("e" . "example")
                                  ("E" . "export")
                                  ("l" . "export latex")
                                  ("py" . "src python")
                                  ("ju" . "src jupyter-python")
                                  ("q" . "quote")
                                  ("s" . "src")
                                  ("v" . "verse")
                                  ("el" . "src emacs-lisp")
                                  ("d" . "definition")
                                  ("t" . "theorem")))
  (org-startup-indented t)
  (org-hide-leading-stars nil)
  (org-hide-emphasis-markers nil)
  (org-pretty-entities nil)
  (org-adapt-indentation t)
  (org-agenda-tags-column 0)
  :init
  (with-eval-after-load 'flycheck
    (flycheck-add-mode 'proselint 'org-mode))
  :config
  (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
  (require 'org-habit)
  (require 'org-tempo)
  )

(require 'org)

#+end_src

** Style and formatting

#+begin_src emacs-lisp

(use-package org-bullets
  :ensure t)

(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(defun duy/style-org ()
  (setq line-spacing 0.2)
  (variable-pitch-mode +1)
  (mapc
   (lambda (face) ;; Other fonts with fixed-pitch.
     (set-face-attribute face nil :inherit 'fixed-pitch))
   (list 'org-block
         'org-table
         'org-verbatim
         'org-block-begin-line
         'org-block-end-line
         'org-meta-line
         'org-document-info-keyword
         'line-number
         'line-number-current-line))
  (mapc
   (lambda (face) ;; Other fonts with fixed-pitch.
     (set-face-attribute face nil :inherit '(shadow fixed-pitch)))
   (list 'org-code
         'org-table
         'org-verbatim)))

;; (add-hook 'org-mode-hook #'duy/style-org)

#+end_src

** Org roam

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/org-roam-notes")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :bind (:map org-mode-map
              ("C-M-i" . completion-at-point)
	      :map org-roam-dailies-map
              ("Y" . org-roam-dailies-capture-yesterday)
              ("T" . org-roam-dailies-capture-tomorrow))
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (setq org-roam-node-display-template #("${title:*} ${tags:40}" 11 21
					 (face org-tag)))
  (org-roam-db-autosync-mode))

(leader-keys
  "n"   '(:ignore t :which-key "Roam")
  "n l" '(org-roam-buffer-toggle :which-key "Buffer toggle")
  "n f" '(org-roam-node-find :which-key "Find")
  "n i" '(org-roam-node-insert :which-key "Insert")
  "n t" '(org-roam-tag-add :which-key "Add tag")
  "n T" '(org-roam-tag-remove :which-key "Remove tag")
  "n d" '(org-roam-dailies-map :which-key "Dailies"))
#+end_src

** Org roam agenda setup

This setup primarily follows the setup from d12frosted's [[https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html][blog]].

*** Vulpea

Vulpea is a package written by d12frosted with additional functions for org and
org-roam. See also [[https://github.com/d12frosted/vulpea][here]].

#+begin_src emacs-lisp
(use-package vulpea
  :ensure t)
#+end_src

*** s.el

s.el is an emacs string manipulation package.

#+begin_src emacs-lisp
(use-package s
  :ensure t)
#+end_src

*** Dynamic org-agenda

- Update nodes with "project" tag if it has a TODO item.
- Set agenda files to nodes which have a "project" tag.

#+begin_src emacs-lisp
(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (seq-find                                 ; (3)
   (lambda (type)
     (eq type 'todo))
   (org-element-map                         ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (org-element-property :todo-type h)))))

(defun vulpea-project-update-tag ()
  "Update PROJECT tag in the current buffer."
  (when (and (not (active-minibuffer-window))
             (vulpea-buffer-p))
    (save-excursion
      (goto-char (point-min))
      (let* ((tags (vulpea-buffer-tags-get))
             (original-tags tags))
        (if (vulpea-project-p)
            (setq tags (cons "project" tags))
          (setq tags (remove "project" tags)))

        ;; cleanup duplicates
        (setq tags (seq-uniq tags))

        ;; update tags if changed
        (when (or (seq-difference tags original-tags)
                  (seq-difference original-tags tags))
          (apply #'vulpea-buffer-tags-set tags))))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun vulpea-project-files ()
  "Return a list of note files containing 'project' tag." ;
  (seq-uniq
   (seq-map
    #'car
    (org-roam-db-query
     [:select [nodes:file]
              :from tags
              :left-join nodes
              :on (= tags:node-id nodes:id)
              :where (like tag (quote "%\"project\"%"))]))))

(defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (vulpea-project-files)))

(add-hook 'find-file-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-project-update-tag)

(advice-add 'org-agenda :before #'vulpea-agenda-files-update)
#+end_src

*** Fix title org-roam file in todo list

#+begin_src emacs-lisp
(setq org-agenda-prefix-format
      '((agenda . " %i %(vulpea-agenda-category 12)%?-12t% s")
        (todo . " %i %(vulpea-agenda-category 12) ")
        (tags . " %i %(vulpea-agenda-category 12) ")
        (search . " %i %(vulpea-agenda-category 12) ")))

(defun vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:

- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (vulpea-buffer-prop-get "title"))
         (category (org-get-category))
         (result
          (or (if (and
                   title
                   (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))
#+end_src

*** org-super-agenda

Use org-super-agenda to group TODOs in agenda view.

#+begin_src emacs-lisp

(use-package org-super-agenda
  :ensure t
  :config
  (add-hook 'org-agenda-mode-hook 'org-super-agenda-mode)
  (setq org-super-agenda-header-map (make-sparse-keymap)))

#+end_src

*** TODOs, tags etc.

Set todo keywords, tags etc.

#+begin_src emacs-lisp

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c)")))

(setq org-log-done 'time
      org-log-into-drawer t
      org-log-state-notes-insert-after-drawers nil)

(setq org-tag-alist (quote (("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            ("@school" . ?s)
                            (:newline)
                            ("WAITING" . ?w)
                            ("HOLD" . ?H)
                            ("CANCELLED" . ?c))))

(setq org-fast-tag-selection-single-key nil)
#+end_src

*** Archiving

Function to archive all done task in current org agenda/file.

#+begin_src emacs-lisp
(defun duy/org-archive-done-tasks-agenda ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'agenda))

(defun duy/org-archive-done-tasks-file ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file))
#+end_src

*** org-agenda layout

Function to automatically group TODOs by title.
#+begin_src emacs-lisp

(org-super-agenda--def-auto-group title "title of org file"
  :key-form (org-super-agenda--when-with-marker-buffer (org-super-agenda--get-marker item)
              (org-roam-db--file-title))
  :header-form key)

#+end_src

Layout of agenda.

#+begin_src emacs-lisp
(setq duy/agenda-group-main
      '(
	(:discard (:scheduled today))
	(:discard (:scheduled past))
	(:name "Next"
	       :todo "NEXT")
	(:name "Focus"
	       :tag "focus")
	(:name "Scheduled"
	       :scheduled future)
	(:name "Waiting"
	       :todo "WAITING")
	(:discard (:anything t))
	))

(setq duy/agenda-group-today
      '(
	(:name "Today"
	       :time-grid t
	       :date today
	       :scheduled today)
	(:name "Upcoming deadlines"
               :deadline future)
	))

(setq duy/agenda-group-backlog
      '(
	(:discard (:tag "refile"))
	(:auto-title t) ;; defined with org-super-agenda--def-auto-group
	))

(setq duy/agenda-group-backlog-unscheduled
      '(
	(:discard (:tag "refile"))
	(:discard (:scheduled t))
	(:discard (:deadline today))
	(:auto-title t) ;; defined with org-super-agenda--def-auto-group
	))

(setq duy/agenda-group-inbox
      '(
	(:name ""
	       :tag "refile")
	(:discard (:anything t))
	))

(setq org-agenda-custom-commands
      `((" " "Agenda"
	 ((agenda "" ((org-agenda-span 'day)
		      (org-super-agenda-groups duy/agenda-group-today)))
	  (todo "" ((org-agenda-overriding-header "Tasks")
		    (org-super-agenda-groups duy/agenda-group-main)))
	  (todo "" ((org-agenda-overriding-header "Inbox")
		    (org-super-agenda-groups duy/agenda-group-inbox)))
	  (todo "TODO" ((org-agenda-overriding-header "Backlog")
			(org-super-agenda-groups duy/agenda-group-backlog-unscheduled)))
	  ))
	("b" "Backlog"
	 ((todo "TODO" ((org-agenda-overriding-header "Backlog")
			(org-super-agenda-groups duy/agenda-group-backlog))))
	 )))
#+end_src

*** Inbox capture settings and templates

#+begin_src emacs-lisp
(if (string= system-name "Duys-MBP.home")
    (setq inbox-file "~/org-roam-notes/20220101143145-inbox.org"
          general-task-file "~/org-roam-notes/20220101143545-tasks.org")
  (if (string= system-name "NL5CG1462QH6")
      (setq inbox-file "~/org-roam-notes/20220522180401-inbox.org"
            general-task-file "~/org-roam-notes/20220522181915-general_tasks.org")
    (setq inbox-file nil)))

(setq org-capture-templates
      '(("i" "Inbox" plain (file inbox-file)
         "* TODO %?\n%U\n" :clock-in nil :clock-resume t)
        ("t" "Today" plain (file general-task-file)
         "* TODO %?\n SCHEDULED: %t\n%U\n" :clock-in nil :clock-resume t)
        ))
#+end_src

Function to process inbox item.

#+begin_src emacs-lisp
(defun duy/org-agenda-process-inbox-item ()
  "Process a single item in the org-agenda."
  (interactive)
  (org-with-wide-buffer
   (org-agenda-set-tags)
   ;; (org-agenda-priority)
   (org-agenda-refile nil nil t)))
#+end_src

Function to process inbox.

#+begin_src emacs-lisp
(defun duy/bulk-process-entries ()
  (if (not (null org-agenda-bulk-marked-entries))
      (let ((entries (reverse org-agenda-bulk-marked-entries))
            (processed 0)
            (skipped 0))
        (dolist (e entries)
          (let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
            (if (not pos)
                (progn (message "Skipping removed entry at %s" e)
                       (cl-incf skipped))
              (goto-char pos)
              (let (org-loop-over-headlines-in-active-region) (funcall 'duy/org-agenda-process-inbox-item))
              ;; `post-command-hook' is not run yet.  We make sure any
              ;; pending log note is processed.
              (when (or (memq 'org-add-log-note (default-value 'post-command-hook))
                        (memq 'org-add-log-note post-command-hook))
                (org-add-log-note))
              (cl-incf processed))))
        (org-agenda-redo)
        (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
        (message "Acted on %d entries%s%s"
                 processed
                 (if (= skipped 0)
                     ""
                   (format ", skipped %d (disappeared before their turn)"
                           skipped))
                 (if (not org-agenda-persistent-marks) "" " (kept marked)")))))

(defun duy/org-process-inbox ()
  "Called in org-agenda-mode, processes all inbox items."
  (interactive)
  (org-agenda-bulk-mark-regexp "refile:")
  (duy/bulk-process-entries))
#+end_src

*** Org refile settings

Refile targets are set to all files in the org-roam-notes folder.

#+begin_src emacs-lisp
(setq myroamfiles (directory-files org-roam-directory t "org$"))

;; -------- refile settings -----
(setq org-refile-targets '((org-agenda-files :maxlevel . 5) (myroamfiles :maxlevel . 5)))
(setq org-refile-use-outline-path 'file)  ;; 'file or nil
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

#+begin_src emacs-lisp
(defun vulpea-roam-files-update (&rest _)
  "Update the value of `myroamfiles'."
  (setq myroamfiles (directory-files org-roam-directory t "org$")))

(advice-add 'org-agenda :before #'vulpea-roam-files-update)
#+end_src

Some ideas for the future:

- Project nodes have "project" tags, which are added by myself.
- Nodes have "task" tags based on existence of TODO items.
- Org agenda items are nodes with a "task" tag.
- Refile targets are nodes with a "project" or "task" tag.

*** Launch org-agenda on startup

#+begin_src emacs-lisp
;; (add-hook 'after-init-hook '(lambda () (org-agenda nil " ") (delete-other-windows)))
#+end_src

** Keybindings

#+begin_src emacs-lisp
(defun duy/org-agenda-remove-schedule ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively #'org-agenda-schedule)))

(defun duy/org-agenda-remove-deadline ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively #'org-agenda-deadline)))
#+end_src

#+begin_src emacs-lisp
(general-define-key
 :states '(normal motion override)
 :keymaps '(org-agenda-mode-map)
 "c"   '(:ignore t :which-key "Prefix")
 "c s" '(org-agenda-schedule :which-key "Schedule")
 "c d" '(org-agenda-deadline :which-key "Deadline")
 "c r" '(hidden-command :which-key t)
 "c S" '(duy/org-agenda-remove-schedule :which-key "Remove schedule")
 "c D" '(duy/org-agenda-remove-deadline :which-key "Remove deadline")
 "c t" '(org-agenda-set-tags :which-key "Tags")
 "r"   '(:ignore t :which-key "Refile")
 "r r" '(duy/org-agenda-process-inbox-item :which-key "Refile item")
 "r i" '(duy/org-process-inbox :which-key "Process inbox")
 "c a" '(duy/org-archive-done-tasks-agenda :which-key "Archive all done tasks")
 )
#+end_src

Rebind movement in org calendar:

#+begin_src emacs-lisp
(defmacro my-org-in-calendar (command)
  (let ((name (intern (format "my-org-in-calendar-%s" command))))
    `(progn
       (defun ,name ()
         (interactive)
         (org-eval-in-calendar '(call-interactively #',command)))
       #',name)))

(general-def org-read-date-minibuffer-local-map
  "h" (my-org-in-calendar calendar-backward-day)
  "l" (my-org-in-calendar calendar-forward-day)
  "k" (my-org-in-calendar calendar-backward-week)
  "j" (my-org-in-calendar calendar-forward-week)
  "C-h" (my-org-in-calendar calendar-backward-month)
  "C-l" (my-org-in-calendar calendar-forward-month)
  "C-k" (my-org-in-calendar calendar-backward-year)
  "C-j" (my-org-in-calendar calendar-forward-year))
#+end_src

* Htmlize

#+begin_src emacs-lisp
(use-package htmlize
  :ensure t)
#+end_src

* Markdown

#+begin_src emacs-lisp

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom
  (markdown-command "multimarkdown")
  (markdown-indent-on-enter 'indent-and-new-item))

#+end_src

* reStructuredText

#+begin_src emacs-lisp
(defun duy/rst-nl-indent ()
  (interactive)
  (newline)
  (indent-relative-first-indent-point))

(evil-define-key '(normal insert visual) rst-mode-map (kbd "C-j") 'duy/rst-nl-indent)

(defun duy/rst-mode-hook ()
  (electric-indent-local-mode -1))
(add-hook 'rst-mode-hook #'duy/rst-mode-hook)

#+end_src

* Development

** Language Server Protocol (lsp-mode)

#+begin_src emacs-lisp
;; (defun lsp-mode-setup ()
;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
;;   (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook 
  (lsp-mode . lsp-enable-which-key-integration)
  :custom
  (lsp-diagnostics-provider :capf)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-lens-enable nil)
  (lsp-disabled-clients '((python-mode . pyls)))
  :init
  (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
  :config
  )

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :after lsp-mode
  :custom
  (lsp-ui-doc-show-with-cursor nil)
  :config
  (setq lsp-ui-doc-position 'bottom)
  )

(use-package lsp-treemacs
  :ensure t
  :after (lsp-mode treemacs))

(use-package lsp-ivy
  :ensure t
  :after lsp-mode)
#+end_src

The follow lines fix the TABs (white spaces) in the lsp function descriptions
(when running lsp-describe-thing-at-point).

#+begin_src emacs-lisp

(defun render-markup-content (kind content)
  (message kind)
  (replace-regexp-in-string " " " " content))
(setq lsp-render-markdown-markup-content #'render-markup-content)

#+end_src

The following lines are required to tune and improve LSP performance (see also [[https://emacs-lsp.github.io/lsp-mode/page/performance/][here]]):

#+begin_src emacs-lisp

(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq lsp-idle-delay 0.500)

#+end_src

** Debugging with dap

#+begin_src emacs-lisp

(use-package dap-mode
  :after lsp-mode
  :commands dap-debug
  :hook ((python-mode . dap-ui-mode)
	 (python-mode . dap-mode))
  :config
  (eval-when-compile
    (require 'cl))
  (require 'dap-python)
  (require 'dap-lldb)
  )

#+end_src

** Company for completion

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :delight company-mode
  :bind (:map company-active-map
              ("<tab>" . nil)
              ("TAB" . nil)
              ("M-<tab>" . company-complete-common-or-cycle)
              ("M-<tab>" . company-complete-selection))
  (:map lsp-mode-map
        ("M-<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.01)
  :config
  )

(use-package company-prescient
  :ensure t
  :after company
  :config
  (company-prescient-mode 1)
  (prescient-persist-mode)
  )

;; (use-package company-box
;;   :ensure t
;;   :hook (company-mode . company-box-mode))

#+end_src

** Python

*** Basic setup

#+begin_src emacs-lisp

(use-package python-mode
  :hook
  ;; (python-mode . pyvenv-mode)
  (python-mode . flycheck-mode)
  (python-mode . company-mode)
  (python-mode . blacken-mode)
  (python-mode . yas-minor-mode)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  (python-shell-interpreter "python3")
  :config
  )

(use-package conda
  :ensure t
  :defer t
  :init
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  :config
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell))

#+end_src

**** Troubleshooting

The first Python buffer always starts in "Py mode" instead of "Python
mode". All subsequent buffers are correctly opened in "Python
mode". Different posts on the internet suggest to add the following
lines, however this did not help for me. For completeness though,
these are the lines:

#+begin_src emacs-lisp

;; (autoload 'python-mode "python-mode" "Python Mode." t)
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))

#+end_src

*** Linting and formatting

flake8 for linting and black(en) for formatting. Also enables auto-formatting
on save for Python mode.

#+begin_src emacs-lisp

(use-package flycheck
  :ensure t
  :delight flycheck-mode
  :init
  (setq flycheck-check-syntax-automatically '(save new-line)
        flycheck-idle-change-delay 5.0
        flycheck-display-errors-delay 0.9
        flycheck-highlighting-mode 'symbols
        flycheck-indication-mode 'left-fringe
        flycheck-standard-error-navigation t
        flycheck-deferred-syntax-check nil)
  )
(use-package blacken
  :ensure t
  :init
  (setq-default blacken-fast-unsafe t)
  (setq-default blacken-line-length nil)) ; setting to nil is required to use pyproject.toml settings

#+end_src


*** Pyright (Python lsp)

Before using lsp-pyright, make sure sure you have installed node.js through
your package manager (the npm command should be available in your
terminal). Check out the nvm package for a node version manager (as pyright
requires a specific version of node). Then, install pyright globally by running
the following command in your terminal:

#+begin_src bash

npm install -g pyright

sudo npm update -g pyright

#+end_src

#+begin_src emacs-lisp

;; (defun restart-lsp-python()
;;   "Restart LSP server in Python mode"
;;   (when (eq major-mode 'python-mode)
;;     (lambda()
;;     (lsp-restart-workspace)
;;     (lsp))))

(use-package lsp-pyright
  :ensure t
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))

#+end_src

*** Python MS LSP

This is an alternative solution to Pyright. Currently using Pyright on work desktop as it seems to be stable and fairly quick (after tuning the options).

# #+begin_src emacs-lisp
# (use-package lsp-python-ms
#   :ensure t
#   :init (setq lsp-python-ms-auto-install-server t)
#   :hook (python-mode . (lambda ()
#                           (require 'lsp-python-ms)
#                           (lsp-deferred)))  ; or lsp-deferred
#   :config
#   (add-hook 'pyvenv-post-activate-hooks (lambda () (lsp-restart-workspace)))
#   (add-hook 'conda-postactivate-hook (lambda () (lsp-restart-workspace)))
#   (add-hook 'conda-postdeactivate-hook (lambda () (lsp-restart-workspace)))) ; or lsp-deferred
# #+end_src

*** Pyvenv

#+begin_src emacs-lisp
;; (use-package pyvenv
;;   :ensure t
;;   :init
;;   (setenv "WORKON_HOME" "~/.cache/pypoetry/virtualenvs")) ; or wherever the envs are installed
#+end_src

#+begin_src emacs-lisp
;; (use-package pyvenv
;;   :ensure t
;;   :init
;;   (setenv "WORKON_HOME" "~/.venvs/")
;;   :config
;;   ;; (pyvenv-mode t)

;;   ;; Set correct Python interpreter
;;   (setq pyvenv-post-activate-hooks
;;         (list (lambda ()
;;                 (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
;;   (setq pyvenv-post-deactivate-hooks
;;         (list (lambda ()
;;                 (setq python-shell-interpreter "python3")))))
#+end_src

*** Pytest

#+begin_src emacs-lisp
(use-package python-pytest
  :ensure t
  :after python
  :custom
  (python-pytest-arguments
   '("--color"
     "--failed-first"
     ))
  :config
  (leader-keys
    :keymaps '(python-mode-map)
    "t" '(python-pytest-popup :wk "Pytest")
    ))
#+end_src

*** Jupyter

#+begin_src emacs-lisp
(use-package jupyter
  :ensure t)

(use-package ein
  :ensure t)

(local-leader-keys
  :keymaps 'ein:ipynb-mode-map
  "o" '(ein:process-find-file-callback :which-key "Open notebook")
  )

(local-leader-keys
  :keymaps '(ein:notebook-mode-map)
  "c" '(ein:worksheet-execute-cell-km :which-key "Run cell")
  "r" '(ein:worksheet-execute-all-cells :which-key "Run all cells")
  "C" '(ein:worksheet-execute-cell-and-insert-below-km :which-key "Run and insert cell")
  "a" '(ein:worksheet-insert-cell-above-km :which-key "Insert cell above")
  "b" '(ein:worksheet-insert-cell-below-km :which-key "Insert cell below")
  "d" '(ein:worksheet-kill-cell-km :which-key "Delete cell")
  "s" '(ein:notebook-save-notebook-command-km :which-key "Save notebook")
  "t" '(ein:worksheet-toggle-cell-type :which-key "Toggle cell type")
  "u" '(ein:worksheet-change-cell-type :which-key "Change cell type")
  "w" '(ein:worksheet-copy-cell-km :which-key "Copy cell")
  "y" '(ein:worksheet-yank-cell-km :which-key "Yank cell")
  )

(setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                     (:session . "py")
                                                     (:kernel . "python3")))
#+end_src

** Running any shell command

#+begin_src emacs-lisp
(defun run-cmd-on-buffer-file ()
  (interactive)
  (message "Using cmd to do XYZ" (buffer-name))
  (shell-command (concat "cmd " (buffer-file-name) " --arguments"))
  (message "Command completed!"))
#+end_src

* Spell check

Spell checking is done with flyspell and aspell. Aspell needs to be installed
on OS level. Paths below need to be updated accordingly.

Run M-x flyspell-buffer to do a spell check on the whole buffer. Alternatively,
this can also be added as a hook.

#+begin_src emacs-lisp

(defun aspell-path ()
  (cond ((eq system-type 'gnu/linux) "/usr/bin/aspell")
	((eq system-type 'darwin) "/usr/local/bin/aspell")
	(t "/usr/bin/aspell")))

(use-package flyspell
  :custom
  (ispell-program-name "aspell")
  ;; Default dictionary. To change do M-x ispell-change-dictionary RET.
  (aspell-dictionary "en_GB-ise-wo_accents")
  ;; (aspell-program-name "/usr/local/bin/aspell")
  (aspell-program-name (aspell-path))
  (ispell-dictionary "en_GB-ise-wo_accents")
  ;; (ispell-program-name "/usr/local/bin/aspell")
  (ispell-program-name (aspell-path))
  :config
  (add-hook 'markdown-mode-hook 'flyspell-mode))

(use-package flyspell-correct
  :ensure t
  :bind ("C-;" . flyspell-correct-wrapper))

#+end_src

* PDF tools

Also install pdftotext in your OS (e.g. via sudo apt on Ubuntu).

#+begin_src emacs-lisp

(use-package pdf-tools
  :ensure t)
#+end_src

* Atomic Chrome

#+begin_src emacs-lisp
(use-package atomic-chrome
  ;; dependency Atomic Chrome extension (in Chrome)
  :ensure t
  :init
  (setq atomic-chrome-default-major-mode 'markdown-mode)
  (setq atomic-chrome-extension-type-list '(ghost-text))
  (setq atomic-chrome-buffer-open-style 'frame) 
  (setq atomic-chrome-url-major-mode-alist
	'(("github\\.com" . gfm-mode)
          ("mail.google.com" . html-mode)))
  :config
  (atomic-chrome-start-server))
#+end_src

* vterm

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :bind (:map vterm-mode-map
	      ("C-b" . vterm-send-C-b))
  :config
  (add-hook 'vterm-mode-hook (lambda () (setq-local global-hl-line-mode nil))))
#+end_src

#+begin_src emacs-lisp
(use-package vterm-toggle
  :ensure t
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 (display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 (dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3)))
  (leader-keys
    "'" '(vterm-toggle :wk "vterm")
    )
  )
#+end_src

* WSL2 specific

#+begin_src emacs-lisp
(when (and (eq system-type 'gnu/linux)
           (string-match "WSL" operating-system-release))

  ;; Set first buffer to org-agenda for usage with emacslient
  ;; (setq initial-buffer-choice '(lambda () (get-buffer org-agenda-buffer-name)))

  ;; Set custom fonts
  (defun duy/setup-font-faces()
    (when (display-graphic-p)
      (set-face-attribute 'default nil :font (font-spec :family "FiraMono Nerd Font Mono"))
      (set-face-attribute 'fixed-pitch nil :font (font-spec :family "FiraMono Nerd Font Mono"))
  ))
  (add-hook 'after-init-hook 'duy/setup-font-faces)
  (add-hook 'server-after-make-frame-hook 'duy/setup-font-faces)
  )
#+end_src

