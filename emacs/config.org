* General UI settings
** Do not show startup screen
#+begin_src emacs-lisp

(setq inhibit-startup-message t)

#+end_src
** Disable tool bar, menu bar and scroll bar
#+begin_src emacs-lisp

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)

#+end_src
** Line number configuration
#+begin_src emacs-lisp

;; Highlight current line
(global-hl-line-mode t)
;; Enable line numbers
(global-display-line-numbers-mode t)
;; Set relative line numbers
(setq display-line-numbers-type 'relative)

#+end_src
** Disable bell sound
#+begin_src emacs-lisp

(setq ring-bell-function 'ignore)

#+end_src
(setq command-line-default-directory "~/")
#+end_src
** Set default fill-column
#+begin_src emacs-lisp
(setq-default fill-column 79)
#+end_src

* Package management
** Add MELPA to package archives
#+begin_src emacs-lisp

(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")))
(package-initialize)

#+end_src
** Install use-package for easy package installation
#+begin_src emacs-lisp

(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'usepackage))

#+end_src
** Use Delight to hide modes from modeline bar
#+begin_src emacs-lisp

(use-package delight
  :ensure t)

#+end_src

* Themes
** General theme
Currently using doom-one from doom-themes
#+begin_src emacs-lisp

(use-package doom-themes
  :ensure t
  :init
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (load-theme 'doom-one t))

#+end_src
** Doom modeline 
This package depends on all-the-icons package. When installing Doom
modeline for the first time, please run 'all-the-icons-install-fonts'
via M-x first.
#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+end_src

Ensure icons are used in Daemon mode:

#+begin_src emacs-lisp

(add-hook 'server-after-make-frame-hook
 (lambda ()
     (setq doom-modeline-icon (display-graphic-p))))

#+end_src
* Emacs UI and menu enhancements
** Which key
Which key adds a guiding menu for keybindings
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :init
  (setq which-key-idle-delay 0.5)
  :config (which-key-mode))
#+end_src
** Ivy, Counsel and Swiper
Ivy is a customisable completion mechanism. Counsel contains a collection of
Ivy-enhanced versions of command Emacs commands (e.g. M-x). Swiper as an
Ivy-enhanced version of Isearch.
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
(use-package counsel
  :ensure t
  :after ivy
  :config (counsel-mode))
(use-package swiper
  :ensure t
  :after ivy)
;; Ivy rich to add description to M-x and other menus
(use-package ivy-rich
  :ensure t
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
			  ivy-rich-switch-buffer-align-virtual-buffer t
			  ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
(ivy-rich-mode 1)
(setq ivy-initial-inputs-alist nil) ; Remove the ^ in ivy buffers
					; Smex to allow M-x remember our history
(use-package smex :ensure t)
(smex-initialize)
#+end_src
** Helpful
Helpful package for more helpful descriptions of functions, commands and
variables.
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Project management

** TODO Magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :delight projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/PythonProjects")
    (setq projectile-project-search-path '("~/PythonProjects")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :ensure t
  :after projectile)
#+end_src

* Other useful packages
** Hydra
#+begin_src emacs-lisp
(use-package hydra
  :ensure t)
#+end_src
** Command log mode to show keypress and command
Related commands start with "clm" in the M-x menu
#+begin_src emacs-lisp
(use-package command-log-mode
  :ensure t)
#+end_src
** Yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
#+end_src

* Window management
** Winum
#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :config (progn
	    (setq winum-scope 'frame-local
		  winum-reverse-frame-list nil
		  winum-auto-setup-setup-mode-line nil
		  winum-ignored-buffers '(" *which-key*"))
	    (winum-mode)))
#+end_src
** Function to interactivel resize window
#+begin_src emacs-lisp
(defhydra hydra-window-resize ()
  "Resize window"
  ("h" shrink-window-horizontally "shrink horizontally")
  ("l" enlarge-window-horizontally "enlarge horizontally")
  ("j" shrink-window "shrink vertically")
  ("k" enlarge-window "enlarge vertically")
  ("b" balance-windows "reset sizes")
  ("q" nil "quit"))
#+end_src

* File management

** Dired

#+begin_src emacs-lisp

(use-package dired
  :after evil evil-collection
  ;; :commands (dired dired-jump)
  ;; :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-hide-dotfiles
  :ensure t
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

*** Mac specific settings

OS X's ls function does not support the --group-directories-first switch. In order to enable this, install GNU core utils:

#+begin_src shell

brew install coreutils

#+end_src

Then the emacs-lisp code below ensures that dired uses the gls (GNU ls) command:

#+begin_src emacs-lisp

(when (string= system-type "darwin")
  (setq dired-use-ls-dired t
        insert-directory-program "/usr/local/bin/gls"))

#+end_src
* Keybindings
** Evil mode
The Evil package(s) enable Vim-like keybindings
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config
  (evil-mode)
  ;; Use visual line motions (e.g. for when a long line is wrapped)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))
#+end_src

Evil collection is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer magit pdf doc-view company)) ; Modes to activate Evil keybindings for
  (evil-collection-init))
#+end_src

Bind jk in insert mode to ESC.

#+begin_src emacs-lisp
(use-package key-chord
  :ensure t
  :init
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-mode 1))
#+end_src

Evil nerd commenter for line comment

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :ensure t)
#+end_src
** Undo tree
Enable Vim-like undo/redo
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))
#+end_src

** Bindings with SPC prefix
The config in this section enable SPC as a prefix to a useful and commonly used
function (similar to Spacemacs/Doom/VSpaceCode).

*** General package 
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :init
  (setq general-override-states '(insert
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer leader-keys
    :states '(normal visual emacs motion) ; consider adding motion for using with easymotion
    :keymaps 'override 
    :prefix "SPC"))
#+end_src

*** Buffer management
Add function to kill all buffers except current one.
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

Keybindings for buffer management.
#+begin_src emacs-lisp
(leader-keys
  "TAB"   '(counsel-switch-buffer :which-key "Switch buffer")
  "b"     '(:ignore t :which-key "Buffer")
  "b b"   '(ibuffer :which-key "Ibuffer")
  "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
  "b k"   '(kill-current-buffer :which-key "Kill current buffer")
  "b n"   '(next-buffer :which-key "Next buffer")
  "b p"   '(previous-buffer :which-key "Previous buffer")
  "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
  "b K"   '(kill-buffer :which-key "Kill buffer")
  "b 1"   '(kill-other-buffers :which-key "Kill other buffers"))
#+end_src
*** File management
#+begin_src emacs-lisp
(leader-keys
  "f"     '(:ignore t :which-key "File")
  "."     '(find-file :which-key "Find file")
  "f f"   '(find-file :which-key "Find file")
  "f r"   '(counsel-recentf :which-key "Recent files")
  "f s"   '(save-buffer :which-key "Save file")
  "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
  "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
  "f C"   '(copy-file :which-key "Copy file")
  "f D"   '(delete-file :which-key "Delete file")
  "f R"   '(rename-file :which-key "Rename file")
  "f S"   '(write-file :which-key "Save file as...")
  ;; "f d"   '(:ignore t :which-key "Dired")
  "d"     '(dired :which-key "Dired")
  ;; "f d d" '(dired :which-key "Dired")
  "f j"   '(dired-jump :which-key "Dired jump")
  ;; "f d j" '(dired-jump :which-key "Dired jump")
  "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src
*** Window management
#+begin_src emacs-lisp
(winner-mode 1)
(leader-keys
  ;; Window splits
  "w"     '(:ignore t :which-key "Window")
  "w c"   '(evil-window-delete :which-key "Close window")
  "w n"   '(evil-window-new :which-key "New window")
  "w s"   '(evil-window-split :which-key "Horizontal split window")
  "w v"   '(evil-window-vsplit :which-key "Vertical split window")
  "w C"   '(delete-other-windows :which-key "Close other windows")
  "w r"   '(hydra-window-resize/body :which-key "Resize window")
  ;; Window motions
  "w h"   '(evil-window-left :which-key "Window left")
  "w j"   '(evil-window-down :which-key "Window down")
  "w k"   '(evil-window-up :which-key "Window up")
  "w l"   '(evil-window-right :which-key "Window right")
  "w w"   '(evil-window-next :which-key "Goto next window")
  ;; winner mode
  "w <left>"  '(winner-undo :which-key "Winner undo")
  "w <right>" '(winner-redo :which-key "Winner redo")
  ;; Window numbers
  "1" '(winum-select-window-1 :which-key "Select window 1")
  "2" '(winum-select-window-2 :which-key "Select window 2")
  "3" '(winum-select-window-3 :which-key t)
  "4" '(winum-select-window-4 :which-key t)
  "5" '(winum-select-window-5 :which-key t)
  "6" '(winum-select-window-6 :which-key t)
  "7" '(winum-select-window-7 :which-key t)
  "8" '(winum-select-window-8 :which-key t))
#+end_src
*** Git
#+begin_src emacs-lisp
(leader-keys
  "g"   '(:ignore t :which-key "Git")
  "g s" '(magit :which-key "Magit status"))
#+end_src
*** General text bindings
#+begin_src emacs-lisp
(leader-keys
  "x"   '(:ignore t :which-key "Text")
  "x i" '(indent-region :which-key "Indent region")
  "x s" '(flyspell-correct-wrapper :which-key "Flyspell correct")
  ";"   '(evilnc-comment-or-uncomment-lines :which-key "Toggle line comment"))
#+end_src
*** Easymotion

#+begin_src emacs-lisp

(use-package evil-easymotion
  :ensure t
  :after (general evil)
  :general
  (leader-keys
    "j"   '(:ignore t :which-key "Jump to")
    "j f" '(evilem-motion-find-char :which-key "Find char")
    "j F" '(evilem-motion-find-char-backward :which-key "Find char backward")
    "j j" '(evilem-motion-find-char :which-key "Find char")
    "j J" '(evilem-motion-find-char-backward :which-key "Find char backward")
    "j t" '(evilem-motion-find-char-to :which-key "To char")
    "j T" '(evilem-motion-find-char-to-backward :which-key "To char backward")
    "j l" '(evilem-motion-next-line :which-key "Jump to line forward")
    "j L" '(evilem-motion-previous-line :which-key "Jump to line backward")
    "j e" '(evilem-motion-forward-word-end :which-key "Forward word end")
    "j E" '(evilem-motion-forward-WORD-end :which-key "Forward WORD end")
    "j g e" '(evilem-motion-backward-word-end :which-key "Backward word end")
    "j g E" '(evilem-motion-backward-WORD-end :which-key "Backward WORD end")
    "j w" '(evilem-motion-forward-word-begin :which-key "Forward word")
    "j W" '(evilem-motion-forward-WORD-begin :which-key "Forward WORD")
    "j b" '(evilem-motion-backward-word-begin :which-key "Backward word")
    "j B" '(evilem-motion-backward-WORD-begin :which-key "Backward WORD")
    "j n" '(evilem-motion-search-next :which-key "Search next")
    "j N" '(evilem-motion-search-previous :which-key "Search previous")
    "j g" '(:ignore t :which-key "Backward word end")))

#+end_src

*** evil-snipe

evil-snipe is simulates Vim sneak.

#+begin_src emacs-lisp

(use-package evil-snipe
  :ensure t
  :init
  (evil-normalize-keymaps)
  :after evil
  ;; :general
  ;; (general-vmap evil-snipe-local-mode-map "z" 'evil-snipe-s)
  ;; (general-vmap 'visual evil-snipe-local-mode-map "Z" 'evil-snipe-S)
  :hook (magit-mode . turn-off-evil-snipe-override-mode)
  :custom
  (evil-snipe-scope 'visible)
  (evil-snipe-repeat-scope 'whole-visible)
  (evil-snipe-spillover-scope 'whole-buffer))

  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1)

#+end_src

*** evil-surround

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

*** Eval
#+begin_src emacs-lisp
(leader-keys
  "e"     '(:ignore t :which-key "Eval")
  "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
  "e d"   '(eval-defun :which-key "Eval defun")
  "e e"   '(eval-expression :which-key "Eval elisp expression")
  "e l"   '(eval-last-sexp :which-key "Eval last sexression")
  "e r"   '(eval-region :which-key "Eval region"))
#+end_src
*** Shells and terminals
#+begin_src emacs-lisp
(leader-keys
  "'" '(sh :which-key "Start zsh"))
#+end_src
* Shells and terminals
** Function to disable exit confirmation query for shells and terminals
#+begin_src emacs-lisp
(defun set-no-process-query-on-exit ()
  (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
      (set-process-query-on-exit-flag proc nil))))
#+end_src
** Settings for shell-mode-hook and term-mode-hook
Disable line numbers, line highlight and exit confirmation
#+begin_src emacs-lisp
(dolist (mode '(term-mode-hook
		shell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0)))
  (add-hook mode (lambda () (setq-local global-hl-line-mode nil)))
  (add-hook mode 'set-no-process-query-on-exit))
#+end_src
* Org mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq ;org-directory "~/Org/"
 org-agenda-files '("~/org/tasks.org"
                    "~/org/birthdays.org")
 ;; Settings for todo states
 org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)"))
 ;; Settings for log mode for finished tasks
 org-agenda-start-with-log-mode t
 org-log-done 'time
 org-log-into-drawer t
					;org-default-notes-file (expand-file-name "notes.org" org-directory)
 org-ellipsis " ▼ "
 org-log-done 'time
					;org-journal-dir "~/Org/journal/"
 org-journal-date-format "%B %d, %Y (%A) "
 org-journal-file-format "%Y-%m-%d.org"
 org-hide-emphasis-markers t
 org-startup-indented t)

(setq org-src-preserve-indentation t
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
(use-package org-bullets
  :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(use-package org-tempo)
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
* Markdown

#+begin_src emacs-lisp

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

#+end_src

* Development

** Language Server Protocol (lsp-mode)

#+begin_src emacs-lisp
(defun lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :ensure t
  :after lsp)

(use-package lsp-ivy
  :ensure t
  :after lsp)
#+end_src

The following lines are required to tune and improve LSP performance (see also [[https://emacs-lsp.github.io/lsp-mode/page/performance/][here]]):

#+begin_src emacs-lisp

(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq lsp-idle-delay 0.500)

#+end_src

** Debugging with dap

#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;; :custom
  ;; (lsp-enable-dap-auto-configure nil)
  ;; :config
  ;; (dap-ui-mode 1)
  :commands dap-debug
  :config
  ;; Set up Node debugging
  (require 'dap-node)
  (dap-node-setup) ;; Automatically installs Node debug adapter if needed

  ;; Bind `C-c l d` to `dap-hydra` for easy access
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :wk "debugger")))
#+end_src

** Company for completion

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
  (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))
#+end_src

** Python

*** Basic setup

#+begin_src emacs-lisp

(use-package python-mode
  :ensure t
  :hook
  (python-mode . (lambda ()
		   (lsp-deferred)))
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))

(use-package conda
  :ensure t
  :defer t
  :init
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  :config
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell))

#+end_src

**** Troubleshooting

The first Python buffer always starts in "Py mode" instead of "Python
mode". All subsequent buffers are correctly opened in "Python
mode". Different posts on the internet suggest to add the following
lines, however this did not help for me. For completeness though,
these are the lines:

#+begin_src emacs-lisp

;; (autoload 'python-mode "python-mode" "Python Mode." t)
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))

#+end_src

*** Linting and formatting

flake8 for linting and black(en) for formatting. Also enables auto-formatting
on save for Python mode.

#+begin_src emacs-lisp

(use-package flycheck
  :ensure t
  :hook
  (python-mode . (lambda () (flycheck-add-next-checker 'lsp 'python-flake8)))
  :config
  (setq flycheck-python-flake8-executable "flake8")) ; Ensure flake8 is in path

(use-package blacken
  :ensure t
  :hook
  (python-mode . (lambda () (add-hook 'before-save-hook 'blacken-buffer))))

#+end_src


*** Pyright (Python lsp)

Before using lsp-pyright, make sure sure you have installed node.js through your package manager (the npm command should be available in your terminal). Then, install pyright globally by running the following command in your terminal:

#+begin_src bash

npm install -g pyright

sudo npm update -g pyright

#+end_src

#+begin_src emacs-lisp

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred)
			 (flycheck-add-next-checker 'lsp 'python-flake8)))
  :config
  (add-hook 'pyvenv-post-activate-hooks (lambda () (lsp-restart-workspace)))
  (add-hook 'conda-postactivate-hook (lambda () (lsp-restart-workspace)))
  (add-hook 'conda-postdeactivate-hook (lambda () (lsp-restart-workspace)))) ; or lsp-deferred

#+end_src

*** Python MS LSP

This is an alternative solution to Pyright. Currently using Pyright on work desktop as it seems to be stable and fairly quick (after tuning the options).

# #+begin_src emacs-lisp
# (use-package lsp-python-ms
#   :ensure t
#   :init (setq lsp-python-ms-auto-install-server t)
#   :hook (python-mode . (lambda ()
#                           (require 'lsp-python-ms)
#                           (lsp-deferred)))  ; or lsp-deferred
#   :config
#   (add-hook 'pyvenv-post-activate-hooks (lambda () (lsp-restart-workspace)))
#   (add-hook 'conda-postactivate-hook (lambda () (lsp-restart-workspace)))
#   (add-hook 'conda-postdeactivate-hook (lambda () (lsp-restart-workspace)))) ; or lsp-deferred
# #+end_src

* Spell check

Spell checking is done with flyspell and aspell. Aspell needs to be installed
on OS level. Paths below need to be updated accordingly.

Run M-x flyspell-buffer to do a spell check on the whole buffer. Alternatively,
this can also be added as a hook.

#+begin_src emacs-lisp

(defun aspell-path ()
  (cond ((eq system-type 'gnu/linux) "/usr/bin/aspell")
	((eq system-type 'darwin) "/usr/local/bin/aspell")
	(t "/usr/bin/aspell")))

(use-package flyspell
  :custom
  (ispell-program-name "aspell")
  ;; Default dictionary. To change do M-x ispell-change-dictionary RET.
  (aspell-dictionary "en_GB-ise-wo_accents")
  ;; (aspell-program-name "/usr/local/bin/aspell")
  (aspell-program-name (aspell-path))
  (ispell-dictionary "en_GB-ise-wo_accents")
  ;; (ispell-program-name "/usr/local/bin/aspell")
  (ispell-program-name (aspell-path))
  :config
  (add-hook 'markdown-mode-hook 'flyspell-mode))

(use-package flyspell-correct
  :ensure t
  :bind ("C-;" . flyspell-correct-wrapper))

#+end_src

* PDF tools

Also install pdftotext in your OS (e.g. via sudo apt on Ubuntu).

#+begin_src emacs-lisp

(use-package pdf-tools
  :ensure t)
#+end_src

