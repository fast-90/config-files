* early-init.el

#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" user-emacs-directory)
;;; early-init.el --- early in the morning -*- lexical-binding: t; -*-
;; -*- lexical-binding: t; -*-

;;; Commentary:
;; Provides early initialization for Emacs 27.1+ Do not initialize the
;; package manager.  This is done in `init.el'.  The optimization of
;; the early init comes from both Doom Emacs' config as well as Prot's
;; config.
;; See https://github.com/hlissner/doom-emacs/blob/develop/early-init.el
;; See https://protesilaos.com/dotemacs/

;;; Code:

;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. We want to keep from loading at startup.
(setq package-enable-at-startup nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(push '(mode-line-format . 0) default-frame-alist)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)

;;; Change appearance of titlebar
(setq duy/is-macos
      (string= system-type "darwin"))

(setq duy/is-wsl
      (and (eq system-type 'gnu/linux)
           (string-match "WSL" operating-system-release)))

(cond (duy/is-wsl
       (add-to-list 'default-frame-alist '(undecorated . t)))
      (duy/is-macos
       (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
       (add-to-list 'default-frame-alist '(ns-appearance . dark))
       (setq ns-use-proxy-icon nil)
       (setq frame-title-format nil)))

;; Create a package-quickstart.el
;; (setq package-quickstart t)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Ignore X resources; its settings would be redundant with the other settings
;; in this file and can conflict with later config (particularly where the
;; cursor color is concerned).
(advice-add #'x-apply-session-resources :override #'ignore)

(setq native-comp-async-report-warnings-errors nil) 	; Stop showing compilation warnings on startup

(provide 'early-init)
;;; early-init.el ends here
#+end_src

* =init.el=

The code in this section is tangled to =init.el=. Loading this file with ~org-babel-load-file~ requires loading ~org~. Hence, if we want to use the latest version of ~org~ via ~straight~, we need to ensure both packages are loaded in =init.el=.

** Package management

*** Set straight.el

Bootstrap code as per the instructions:

#+begin_src emacs-lisp :tangle (expand-file-name "init.el" user-emacs-directory)
(setq straight-check-for-modifications '(find-when-checking))

(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

*** Setup use-package

#+begin_src emacs-lisp :tangle (expand-file-name "init.el" user-emacs-directory)
;; Make sure `use-package' is available.

;; Configure `use-package' prior to loading it.

(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t)
  (setq use-package-compute-statistics nil)
  ;; The following is VERY IMPORTANT.  Write hooks using their real name
  ;; instead of a shorter version: after-init ==> `after-init-hook'.
  ;;
  ;; This is to empower help commands with their contextual awareness,
  ;; such as `describe-symbol'.
  (setq use-package-hook-name-suffix nil))

(eval-when-compile
  (require 'use-package))

(use-package diminish :straight t :after use-package) ;; if you use :diminish
(use-package bind-key :straight t :after use-package) ;; if you use any :bind variant
(use-package delight :straight t :after use-package)  ;; Use delighting for modes
#+end_src

*** use-package-ensure-system-package

This =use-package= extension allows us to use the =:ensure-system-package= keyword to only install/load packages if a certain binary package is available.

#+begin_src emacs-lisp :tangle (expand-file-name "init.el" user-emacs-directory)
(use-package use-package-ensure-system-package
  :straight t)
#+end_src

*** Load literate config with org mode

Use latest version of ~org~ via ~straight~.

#+begin_src emacs-lisp :tangle (expand-file-name "init.el" user-emacs-directory)
(use-package org
  :straight t)

(org-babel-load-file
 (expand-file-name
  "~/repos/config-files/emacs/config.org"))
#+end_src


* Lexical bindings

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* General configuration 

** Default settings 

Adjust emacs default settings like UI, indentation, bell sound, back up locations etc.

#+begin_src emacs-lisp
(setq-default cursor-type 'bar)               ; Line-style cursor similar to other text editors
(setq inhibit-startup-screen t)               ; Disable startup screen
(setq initial-scratch-message "")	        ; Make *scratch* buffer blank
(setq confirm-kill-processes nil)		; Stop confirming the killing of processes
(setq use-short-answers t)                    ; y-or-n-p makes answering questions faster
(show-paren-mode t)                           ; Visually indicates pair of matching parentheses
(delete-selection-mode t)                     ; Start writing straight after deletion
(put 'narrow-to-region 'disabled nil)	        ; Allows narrowing bound to C-x n n (region) and C-x n w (widen)
(setq read-process-output-max (* 1024 1024))  ; Increase the amount of data which Emacs reads from the process
(global-hl-line-mode 1)			; Highlight the current line to make it more visible
(global-display-line-numbers-mode t)          ; Enable line numbers
(setq display-line-numbers-type 'relative)    ; Set relative line numbers
(setq create-lockfiles nil)                   ; lock files kill `npm start'
(setq-default fill-column 79)		        ; Set fill column to 80 rather than 70, in all cases.
(pixel-scroll-precision-mode 1)	        ; Precision scrolling
(setq ring-bell-function 'ignore)		; Disable bell sound
(setq-default indent-tabs-mode nil)		; Don't use tabs for indentation
(setq use-default-font-for-symbols nil)       ; Don't use use default fonts for symbols

;; Change locations of backups, autosaves and manual customizations
(setq backup-directory-alist `(("." . "~/.saves")))
(setq auto-save-file-name-transforms `((".*", "~/.saves/" t)))
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** Repeat mode

Repeat mode is a built-in mode implemented from Emacs 28. It allows  repeating certain commands without having to repeatedly press the prefix keys. I mainly use it for changing window sizes (~C-x~ { ~},{,^,v~}) and scrolling through pages with ~logos~ (~C-x~ {~[,]~}).

See also [[https://karthinks.com/software/it-bears-repeating/][karthik's post]] on tips to use ~repeat-mode~.

#+begin_src emacs-lisp
(repeat-mode 1)
#+end_src

** Garbage collection

I copied this over from [[https://github.com/Nathan-Furnal/dotemacs/blob/master/init.el][Nathan Furlow's config,]] who based it on [[https://github.com/doomemacs/doomemacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][Doomemacs's FAQ]] on garbage collection. Essentially, ~gcmh~ sets a high garbage collection threshold when actively using Emacs, and a low threshold when Emacs is not used.

#+begin_src emacs-lisp
(use-package gcmh
  :straight t
  :diminish gcmh-mode
  :custom
  (gcmh-mode 1)
  (gcmh-idle-delay 5)
  (gcmh-high-cons-threshold (* 16 1024 1024))
  (gc-cons-percentage 0.1))
#+end_src

** Eldoc

#+begin_src emacs-lisp
(use-package eldoc
  :delight eldoc-mode
  :custom
  (eldoc-echo-area-use-multiline-p nil))
#+end_src

** Autorevert

#+begin_src emacs-lisp
(use-package autorevert
  :defer 2
  :delight auto-revert-mode
  :custom
  (auto-revert-use-notify nil))
#+end_src

** Recentf

#+begin_src emacs-lisp
(use-package recentf
  :defer 2
  :init
  (recentf-mode 1)
  (add-to-list 'recentf-exclude (recentf-expand-file-name "/tmp/.*"))
  (add-to-list 'recentf-exclude (recentf-expand-file-name "~/.maildir/.*")))
#+end_src

** undo-tree

#+begin_src emacs-lisp
(use-package undo-tree
  :straight t
  :init
  (setq undo-tree-auto-save-history nil)
  (global-undo-tree-mode))
#+end_src

** Helpful

#+begin_src emacs-lisp
(use-package helpful
  :straight t
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Hydra

#+begin_src emacs-lisp
(use-package hydra
  :straight t)
#+end_src

** So-long

#+begin_src emacs-lisp
(use-package so-long
  :init
  (setq so-long-mode-line-label nil)
  (defun duy/so-long-toggle ()
    "Toggle so-long-minor mode in current buffer"
    (interactive)
    (if (bound-and-true-p so-long-minor-mode)
        (so-long-revert)
      (so-long-minor-mode)))
  :config
  (global-so-long-mode 1))
#+end_src

** Update load-path

Add folder with custom libraries to load-path. Currently only used for =mail-config=.

#+begin_src emacs-lisp
(push (expand-file-name "lisp" user-emacs-directory) load-path)
#+end_src

* OS specific settings

** Define booleans for OS

#+begin_src emacs-lisp
(setq duy/is-macos
      (string= system-type "darwin"))

(setq duy/is-wsl
      (and (eq system-type 'gnu/linux)
           (string-match "WSL" operating-system-release)))
#+end_src

** MacOS specific settings

Set cmd as meta-key (to align with Windows/Linux location), and set option as super-key.

#+begin_src emacs-lisp
(when duy/is-macos
  (setq mac-command-modifier 'meta
        mac-option-modifier 'super))
#+end_src

** Windows/WSL specific settings

*** Browse URL with Microsoft Edge

#+begin_src emacs-lisp
(when duy/is-wsl  
  (defun browse-url-edge (url &optional _new-window)
    "Browse url with Microsoft Edge."
    (interactive (browse-url-interactive-arg "URL: "))
    (setq url (browse-url-encode-url url))
    (shell-command
     (concat "msedge " url))))
#+end_src

*** Open file with native Windows app

#+begin_src emacs-lisp
(when duy/is-wsl  
(defun duy/open-file-with-wsl (file &optional _new-window)
  "Open file with native Windows app."
  (interactive "fOpen with Windows app: ")
  (shell-command
   (concat "wslview '" file "'"))))
#+end_src

*** Prevent Windows intercepting certain hotkeys

See: https://emacs.stackexchange.com/questions/71706/blocked-keys-how-can-i-get-emacs-to-see-all-keystrokes

Note: after a restart of my WSL computer, =C-M-/= seems to work again. 

** Maximise window on startup

Don't maximise window on WSL (it doesn't work well as the X server does not recognize correct size of monitor).

#+begin_src emacs-lisp
(unless duy/is-wsl
        (add-to-list 'default-frame-alist '(fullscreen . maximized)))
#+end_src

* Evil keybindings (general)

** Evil

The Evil package(s) enable Vim-like keybindings.

#+begin_src emacs-lisp
(use-package evil
  :straight t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-C-i-jump nil)
  (setq evil-disable-insert-state-bindings t)  ; don't use any of these: https://github.com/noctuid/evil-guide#switching-between-evil-and-emacs
  :config
  (evil-mode)
  (evil-set-undo-system 'undo-tree)
  ;; Use visual line motions (e.g. for when a long line is wrapped)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (global-set-key (kbd "C-M-u") 'universal-argument))
#+end_src

** Evil collection

Evil collection is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default.

#+begin_src emacs-lisp
(use-package evil-collection
  :straight t
  :after evil
  :config
  (setq evil-collection-mode-list '(flymake
                                    xref
                                    vterm
                                    dashboard
                                    dired
                                    ibuffer
                                    calc
                                    magit
                                    pdf
                                    doc-view
                                    company
                                    embark
                                    mu4e
                                    helpful)) ; Modes to activate Evil keybindings for
  (evil-collection-init))
#+end_src

** Evil-escape

Bind kj in insert mode to ESC.

#+begin_src emacs-lisp
(use-package evil-escape
  :straight t
  :init
  (evil-escape-mode 1)
  (setq evil-escape-key-sequence "kj")
  (setq evil-escape-delay 0.2))
#+end_src

** Evil nerd commenter

Evil nerd commenter for line comment.

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :straight t
  :bind (("C-'" . evilnc-comment-or-uncomment-lines)
         ("C-," . evilnc-comment-or-uncomment-lines)
  :map org-mode-map)
  ("C-'" . nil))
#+end_src

** Evil-org

Evil-org adds evil bindings to org-agenda.

#+begin_src emacs-lisp
(use-package evil-org
  :straight t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Evil surround

evil-surround enables surrounding of (Vim) text objects (e.g. brackets or quotes)

#+begin_src emacs-lisp
(use-package evil-surround
  :straight t
  :config
  (global-evil-surround-mode 1))
#+end_src

** General

The config in this section enable SPC as a prefix to a useful and commonly used
function (similar to Spacemacs/Doom/VSpaceCode).

#+begin_src emacs-lisp
(use-package general
  :straight t
  :init
  (setq general-override-states '(insert
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer leader-keys
    :states '(normal visual emacs motion) ; consider adding motion for using with easymotion
    :keymaps 'override 
    :prefix "SPC")
  (general-create-definer local-leader-keys
    :states '(normal visual emacs motion) ; consider adding motion for using with easymotion
    :keymaps 'override 
    :prefix ",")
  (leader-keys
    "u"     '(universal-argument :wk "C-u")
    "e"     '(:ignore t          :wk "Eval")
    "e b"   '(eval-buffer        :wk "Eval elisp in buffer")
    "e d"   '(eval-defun         :wk "Eval defun")
    "e e"   '(eval-expression    :wk "Eval elisp expression")
    "e l"   '(eval-last-sexp     :wk "Eval last sexression")
    "e r"   '(eval-region        :wk "Eval region")))
#+end_src

* File and buffer management

** Dired

#+begin_src emacs-lisp
  (use-package dired
    :after evil evil-collection general
    ;; :commands (dired dired-jump)
    ;; :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :init
    (when (string= system-type "darwin")
      (setq dired-use-ls-dired t
            insert-directory-program "/usr/local/bin/gls"))
    :config
    (defun duy/dired-single-up-directory ()
      "Alternative for dired-single-up-directory.
dired-single-up-directory still creates a new buffer."
      (interactive)
      (dired-single-buffer ".."))
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'duy/dired-single-up-directory
      "l" 'dired-single-buffer)
    (leader-keys
      "d"   '(dired      :wk "dired")
      "j d" '(dired-jump :wk "dired-jump")))

  (use-package dired-single
    :straight t
    :after dired)

  (use-package all-the-icons-dired
    :straight t
    :after dired
    :hook (dired-mode-hook . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :straight t
    :after dired
    :hook (dired-mode-hook . dired-hide-dotfiles-mode)
    :init
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

*** MacOS specific setting for Dired

OS X's ls function does not support the --group-directories-first switch. In order to enable this, install GNU core utils:

#+begin_src shell
brew install coreutils
#+end_src

** Buffer management

Add function to kill all buffers except current one.

#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

Keybindings for buffer management.
#+begin_src emacs-lisp
(leader-keys
  "b"   '(:ignore t                          :wk "Buffer")
  "b b" '(ibuffer                            :wk "Ibuffer")
  "b c" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer other window")
  "b k" '(kill-current-buffer                :wk "Kill current buffer")
  "b 1" '(kill-other-buffers                 :wk "Kill other buffers"))
#+end_src

** File management

#+begin_src emacs-lisp
(defun duy/open-config ()
  (interactive)
  (find-file "~/repos/config-files/emacs/config.org"))
#+end_src

#+begin_src emacs-lisp
(leader-keys
 "f"   '(:ignore t           :wk "File")
 "."   '(find-file           :wk "Find file")
 "f f" '(find-file           :wk "Find file")
 "f F" '(consult-find        :wk "Consult find")
 "f g" '(consult-ripgrep     :wk "Consult ripgrep")
 "f r" '(consult-recent-file :wk "Recent files")
 "f s" '(save-buffer         :wk "Save file")
 "f u" '(sudo-edit-find-file :wk "Sudo find file")
 "f C" '(duy/open-config     :wk "Config file")
 "f D" '(delete-file         :wk "Delete file")
 "f R" '(rename-file         :wk "Rename file")
 "f S" '(write-file          :wk "Save file as...")
 "f U" '(sudo-edit           :wk "Sudo edit file"))
#+End_src

* Fonts and themes

** Fonts

The used fonts have different names on different computers:

#+begin_src emacs-lisp
(if (string= system-name "Duys-MBP.home")
    (setq duy/default-font "FiraMono Nerd Font Mono"
          duy/variable-font "IBM Plex Sans"
          duy/default-font-size 13.0
          duy/variable-font-size 14.0)
  (if (string= system-name "NL5CG1462QH6")
      (setq duy/default-font "FiraMono Nerd Font Mono"
            duy/variable-font "IBM Plex Sans"
            duy/default-font-size 10.5
            duy/variable-font-size 12.0)
    (setq duy/default-font nil
          duy/variable-font nil
          duy/default-font-size nil
          duy/variable-font-size nil)))
#+end_src

Set fonts:

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font (font-spec :family duy/default-font :size duy/default-font-size))
  (set-face-attribute 'fixed-pitch nil :font (font-spec :family duy/default-font :size duy/default-font-size))
  (set-face-attribute 'variable-pitch nil :font (font-spec :family duy/variable-font :size duy/variable-font-size))
#+end_src

** Font settings for daemon mode

Font settings for daemon mode:

#+begin_src emacs-lisp
(defun duy/setup-font-faces-daemon()
  (when (daemonp)
    (set-face-attribute 'tab-bar nil :font (font-spec :family "IBM Plex Mono" :size duy/default-font-size))
    (set-face-attribute 'default nil :font (font-spec :family duy/default-font :size duy/default-font-size))
    (set-face-attribute 'fixed-pitch nil :font (font-spec :family duy/default-font :size duy/default-font-size))
    (set-face-attribute 'variable-pitch nil :font (font-spec :family duy/variable-font :size duy/variable-font-size))))

  (add-hook 'after-init-hook 'duy/setup-font-faces-daemon)
  (add-hook 'server-after-make-frame-hook 'duy/setup-font-faces-daemon)
#+end_src

** all-the-icons

#+begin_src emacs-lisp
(set-face-attribute 'tab-bar nil :font (font-spec :family "IBM Plex Mono" :size duy/default-font-size))
(use-package all-the-icons
  :straight t)
#+end_src

** Theme

*** Doom theme

#+begin_src emacs-lisp
;; (use-package doom-themes
;;   :straight t
;;   :init
;;   (setq doom-themes-enable-bold t
;; 	doom-themes-enable-italic t)
;;   (load-theme 'doom-vibrant t))  ;; Ones I liked and used: doom-one, doom-dark+, doom-solarized-light, doom-snazzy, doom-palenight
#+end_src

Other good themes:

- doom-palenight
- doom-one
- doom-vibrant
- doom-dark+ (VS Code like)
- doom-tomorrow-night
- doom-xcode
- doom-material
- doom-ayu-mirage
- doom-monokai-pro

*** Modus themes

#+begin_src emacs-lisp
(use-package modus-themes
  :straight t
  :init
  (setq modus-themes-subtle-line-numbers t)
  (setq modus-themes-hl-line '(intense))
  (setq modus-themes-region '(bg-only accented))
  (setq modus-themes-paren-match '(intense))
  (setq modus-themes-org-blocks 'gray-background)
  (setq modus-themes-completions
        '((selection . (accented))))
  (setq modus-themes-mode-line '(accented))
  (setq modus-themes-markup '(background intense))
  (setq modus-themes-mixed-fonts t)
  (setq modus-themes-headings
        '((0 . (bold 1.5))
          (1 . (rainbow overline bold 1.3))
          (2 . (bold 1.2))
          (3 . (bold 1.1))))
  (setq modus-themes-org-agenda
        '((header-block . (variable-pitch 1.3 medium))
          (header-date . (1.2))))
  (defun duy/modus-themes-toggle ()
    "Toggle between `modus-operandi' and `modus-vivendi' themes.
This uses `enable-theme' instead of the standard method of
`load-theme'.  The technicalities are covered in the Modus themes
manual."
    (interactive)
    (pcase (modus-themes--current-theme)
      ('modus-operandi (progn (enable-theme 'modus-vivendi)
                              (disable-theme 'modus-operandi)
                              (org-mode-restart)))
      ('modus-vivendi (progn (enable-theme 'modus-operandi)
                             (disable-theme 'modus-vivendi)
                             (org-mode-restart)))
      (_ (error "No Modus theme is loaded; evaluate `modus-themes-load-themes' first"))))
  :config
  (load-theme 'modus-vivendi t)
  (load-theme 'modus-operandi t t)
  (set-face-attribute 'tab-bar nil :font (font-spec :family "IBM Plex Mono" :size duy/default-font-size))  ; Loading modus theme resets tab-bar font, so we need to set it (again)
  (leader-keys
    "T" '(nil :wk "Toggle")
    "T T" '(duy/modus-themes-toggle :wk "Toggle modus theme")))
#+end_src

** Battery formatting

This section contains my custom setup to format =battery-mode-line-string=, which will be shown at the top in the global tab-bar. It is mainly copied from the source of =smart-mode-line= and adjusted to my own liking. Main reason for doing this myself is I am not using any other functions of =smart-mode-line=, and =sml/setup=  also messes up the branch name in the mode-line (https://github.com/Malabarba/smart-mode-line/issues/255).

*** Battery functions

#+begin_src emacs-lisp
(defun duy/charging-wsl ()
  "Check whether WSL computer is charging"
  (let ((result (funcall battery-status-function)))
    (let ((charging (cdr (assoc 66 result))))
      (if (not (string= charging "Discharging")) t nil))))

(defun duy/charging-macos ()
  "Check whether MacOS computer is charging"
  (let ((result (funcall battery-status-function)))
    (let ((charging (cdr (assoc 76 result))))
      (if (string= charging "AC") t nil))))

(defun duy/charging ()
  "Check whether computer is charging"
  (if duy/is-wsl (duy/charging-wsl)
    (if duy/is-macos (duy/charging-macos) nil)))

(defun duy/battery-percentage nil
  "Get battery percentage (100% = 1000000)"
  (let
      ((result
        (funcall battery-status-function)))
    (let
        ((percentage-string
          (cdr
           (assoc 112 result))))
      (let
          ((percentage
            (string-to-number percentage-string)))
        percentage))))

(defun duy/battery-icon ()
  "Set battery icon based on battery charge status and percentage"
  (if (duy/charging) (all-the-icons-faicon "plug" :v-adjust 0.04)
    (if (> (duy/battery-percentage) 95.0) (all-the-icons-faicon "battery-full" :v-adjust -0.05)
      (if (> (duy/battery-percentage) 70.0) (all-the-icons-faicon "battery-three-quarters" :v-adjust -0.05)
        (if (> (duy/battery-percentage) 40.0) (all-the-icons-faicon "battery-half" :v-adjust -0.05)
          (if (> (duy/battery-percentage) battery-load-critical) (all-the-icons-faicon "battery-quarter" :v-adjust -0.05) (all-the-icons-faicon "battery-empty" :v-adjust -0.05)))))))

(defface duy/battery-charging
  '((t :foreground "ForestGreen" :weight normal)) "")

(defface duy/battery-discharging
  '((t :inherit warning :weight normal)) "")

(defun duy/set-battery-font ()
  "Set `duy/battery' face depending on battery state."
  (if (duy/charging)
      (copy-face 'duy/battery-charging 'duy/battery)
    (copy-face 'duy/battery-discharging 'duy/battery)))

(defadvice battery-update (before duy/set-battery-font activate)
  "Fontify the battery display."
  (duy/set-battery-font)
  (if duy/is-macos
      (setq battery-mode-line-format (concat " " (duy/battery-icon) " [%b%p%] "))
      (setq battery-mode-line-format (concat " " (duy/battery-icon) "[%b%p%] "))))

(defun duy/battery-formatting ()
  "Apply battery formatting when updating battery status"
  (eval-after-load 'battery
    '(defadvice battery-update (after duy/after-battery-update-advice () activate)
       "Change battery color and icon."
       (when battery-mode-line-string
         (setq battery-mode-line-string
               (propertize battery-mode-line-string
                           'face 'duy/battery))))))
#+end_src

*** Set battery string format

#+begin_src emacs-lisp
(duy/battery-formatting)
(display-battery-mode)
(add-hook 'server-after-make-frame-hook 'battery-update)
#+end_src

** Modeline

*** Doom modeline

Currently using mood-line as a test.

This package depends on all-the-icons package. When installing Doom modeline for the first time, please run 'all-the-icons-install-fonts' via M-x first.

#+begin_src emacs-lisp
;; (use-package doom-modeline
;;   :straight t
;;   :config
;;   (setq doom-modeline-fn-alist (remove '(battery . doom-modeline-segment--battery) doom-modeline-fn-alist))
;;   (doom-modeline-mode 1)
;;   ;; (display-time)
;;   ;; (display-battery-mode)
;;   :custom
;;   (display-time-24hr-format t)
;;   (display-time-day-and-date t))
#+end_src

Ensure icons are used in Daemon mode:

#+begin_src emacs-lisp
;; (add-hook 'server-after-make-frame-hook
;;  (lambda ()
;;      (setq doom-modeline-icon (display-graphic-p))))
#+end_src

NOTE: ~(doom-modeline-mode)~ results in ~(error "bar is not a defined segment")~ in emacs@29. See also: https://githubhot.com/repo/seagle0128/doom-modeline/issues/505

To fix, run this code *once*:

#+begin_src emacs-lisp
;; (setq doom-modeline-fn-alist
;;       (--map
;;        (cons (remove-pos-from-symbol (car it)) (cdr it))
;;        doom-modeline-fn-alist))
#+end_src

*** Mood-line

Currently trying =mood-line= over =doom-modeline= as the latter messes up the battery string in the top right corner.

#+begin_src emacs-lisp
(use-package mood-line
  :straight (:host gitlab :repo "trev-dev/mood-line")
  :init
  ;; (setq battery-mode-line-format (concat " " (duy/battery-icon) "%b%p% "))
  (setq mode-line-misc-info (remove '(global-mode-string ("" global-mode-string)) mode-line-misc-info))
  (mood-line-mode)
  :custom
  (display-time-24hr-format t)
  (display-time-day-and-date t)
  :config
  (display-time-mode)
  (display-battery-mode))
#+end_src

* Tabs

#+begin_src emacs-lisp
(use-package tab-bar
  :straight t
  :hook (server-after-make-frame-hook . (lambda () (tab-bar-rename-tab "main")))
  :init  
  (defun tab-bar-tab-name-format-comfortable (tab i)
    (propertize (concat " " (tab-bar-tab-name-format-default tab i) " ")
                'face (funcall tab-bar-tab-face-function tab)))
  (add-to-list 'tab-bar-format 'tab-bar-format-align-right 'append)
  (add-to-list 'tab-bar-format 'tab-bar-format-global 'append)
  (setq global-mode-string '("  " display-time-string battery-mode-line-string))
  :custom
  (tab-bar-show t)
  (tab-bar-close-button-show nil)
  (tab-bar-new-button-show nil)
  (tab-bar-tab-name-format-function #'tab-bar-tab-name-format-comfortable)
  (tab-bar-select-tab-modifiers '(meta))
  ;; :custom-face
  ;; (tab-bar ((t (:font "IBM Plex Mono" :size duy/tab-bar-font-height))))
  ;; (tab-bar-tab ((t (:bold t :height 1.0 :foreground "sienna"))))
  ;; (tab-bar-tab-inactive ((t (:background nil :inherit 'mode-line :height 1.0 ))))
  :config
  (set-face-attribute 'tab-bar nil :font (font-spec :family "IBM Plex Mono" :size duy/default-font-size))
  (leader-keys
    "t" '(:keymap tab-prefix-map :wk "Tabs")))
#+end_src

** Tab-bookmark

#+begin_src emacs-lisp
(use-package tab-bookmark
  :straight (tab-bookmark :type git :host github :repo "minad/tab-bookmark")
  :init
  (setq bookmark-set-fringe-mark nil))
#+end_src

* Terminals

** Function to disable exit confirmation query for shells and terminals

#+begin_src emacs-lisp
(defun set-no-process-query-on-exit ()
  (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
      (set-process-query-on-exit-flag proc nil))))
#+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :bind (:map vterm-mode-map
                ("C-b" . vterm-send-C-b))
    :config
    (dolist (mode '(term-mode-hook
                    shell-mode-hook
                    vterm-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0)))
      (add-hook mode (lambda () (setq-local global-hl-line-mode nil)))
      (add-hook mode 'set-no-process-query-on-exit)))
#+end_src

I also enabled directory tracking and named vterm buffer, see also here how to setup: https://github.com/akermu/emacs-libvterm

** vterm-toggle

#+begin_src emacs-lisp
(use-package vterm-toggle
  :straight t
  :custom
  (vterm-buffer-name-string "vterm: %s")
  (vterm-toggle-project-root t)
  (vterm-toggle-scope 'project)
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 (display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 (dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3)))
  (leader-keys
    "'" '(vterm-toggle :wk "vterm"))
  (bind-keys  ; For some reason :bind interferes with the SPC ' binding here
   :map vterm-mode-map
   ("C-<return>" . vterm-toggle-insert-cd)))
#+end_src

** exec-path-from-shell

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :straight t
  :if duy/is-macos
  :defer nil
  :config
  (exec-path-from-shell-copy-env "PATH")
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src

* Completion and navigation
** Vertico

#+begin_src emacs-lisp
(use-package vertico
  :straight (:files (:defaults "extensions/*"))
  :bind (:map vertico-map
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous)
              ("C-f" . vertico-exit)
              :map minibuffer-local-map
              ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+end_src

*** Vertico-directory

#+begin_src emacs-lisp
(use-package vertico-directory
  :after vertico
  :straight nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("C-<backspace>" . vertico-directory-delete-word)))
#+end_src

** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :custom
  (completion-styles '(partial-completion orderless flex))
  (completion-category-defaults nil)
  (read-file-name-completion-ignore-case t)
  (completion-category-overrides '((file (styles partial-completion))
                                   (minibuffer (initials orderless)))))
#+end_src

** Savehist

#+begin_src emacs-lisp
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :straight t
  :defer 2
  :config
  (savehist-mode))
#+end_src

** Marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :defer 3
  :custom (marginalia-annotators '(marginalia-annotators-light))
  :config
  (marginalia-mode))
#+end_src

** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :defer 4
  :diminish which-key-mode
  :custom
  (which-key-compute-remaps t)
  :config
  (which-key-mode 1))
#+end_src

** Corfu

#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous)
         ("TAB" . corfu-insert)
         ("RET" . nil)
         :map org-mode-map
         ("C-," . nil))
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  :init
  (global-corfu-mode)
  (global-set-key (kbd "M-i") #'completion-at-point))
#+end_src

Enabling icons in Corfu:

#+begin_src emacs-lisp
(use-package kind-icon
  :straight t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Consult

#+begin_src emacs-lisp
(use-package consult
  :straight t
  :bind (("C-s" . consult-line)
         :map minibuffer-local-map
         ("C-r" . consult-history))
  :config
  (leader-keys
    "TAB" '(consult-buffer      :wk "Switch buffer")
    "j h" '(consult-org-heading :wk "Jump to heading")
    "j o" '(consult-outline     :wk "Jump to outline")))
#+end_src

** Embark

#+begin_src emacs-lisp
(eval-when-compile
  (defmacro my/embark-ace-action (fn)
    `(defun ,(intern (concat "my/embark-ace-" (symbol-name fn))) ()
       (interactive)
       (with-demoted-errors "%s"
         (require 'ace-window)
         (let ((aw-dispatch-always t))
           (aw-switch-to-window (aw-select nil))
           (call-interactively (symbol-function ',fn)))))))
#+end_src

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind
  (("C-;" . embark-act)          ;; pick some comfortable binding
   ("C-:" . embark-dwim)         ;; good alternative: M-.
   ("C-h B" . embark-bindings))
  :config
  (define-key embark-file-map     (kbd "o") (my/embark-ace-action find-file))
  (define-key embark-buffer-map   (kbd "o") (my/embark-ace-action switch-to-buffer))
  (define-key embark-bookmark-map (kbd "o") (my/embark-ace-action bookmark-jump))
  (when (and (eq system-type 'gnu/linux)
             (string-match "WSL" operating-system-release))
    (bind-keys
     :map embark-url-map
     ("e" . browse-url-edge)
     :map embark-file-map
     ("<C-return>" . duy/open-file-with-wsl))))
;; :map minibuffer-local-map
;; (("C-." . embark-act)))) ;; alternative for `describe-bindings'

(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Windows and movement

** ace-window

#+begin_src emacs-lisp
(use-package ace-window
  :straight t
  :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-dispatch-always t)
    (leader-keys
      "w" '(ace-window :wk "ace-window")))
#+end_src
  
** Avy

Package to easily navigate cursor within buffers. Using this over evil-easymotion because Avy does not distinguish between forward and backward and allows jumping across visible buffers.

#+begin_src emacs-lisp
(use-package avy
  :straight t
  :config
  (leader-keys
    "j"   '(:ignore t           :wk "Jump to")
    "j f" '(avy-goto-char       :wk "Find char")
    "j s" '(avy-goto-char-2     :wk "Find char 2")
    "j c" '(avy-goto-char-timer :wk "Find char timer")
    "j j" '(avy-goto-char-timer :wk "Find char timer")
    "j l" '(avy-goto-line       :wk "Jump to line")))
#+end_src

** ace-link

#+begin_src emacs-lisp
(use-package ace-link
  :straight t
  :config
  (evil-collection-define-key 'normal 'helpful-mode-map
   "o" 'ace-link-help)
  :general
  (local-leader-keys
    "o" '(ace-link-org :wk "Open link")))
#+end_src

* Popper

#+begin_src emacs-lisp
(use-package popper
  :straight t
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type)
         ("M-'"   . popper-kill-latest-popup))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
	    "\\*Warnings\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          helpful-mode
	    "\\*eldoc\\*"
	    "\\*PDF-Occur\\*"
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src

* Spell / syntax checking

#+begin_src emacs-lisp
(use-package flyspell
  :defer t)
#+end_src

#+begin_src emacs-lisp
(use-package flyspell-correct
  :straight t
  :after flyspell
  :bind ([remap ispell-word] . flyspell-correct-wrapper))
#+end_src

#+begin_src emacs-lisp
(use-package consult-flyspell
  :straight t
  :config
  (defun duy/flyspell-buffer ()
    "Flyspell buffer using consult."
    (interactive)
    (flyspell-buffer) (consult-flyspell))
  (defun duy/flyspell-region ()
    "Flyspell region using consult."
    (interactive)
    (call-interactively 'flyspell-region)
    (call-interactively 'consult-flyspell))
  (defun duy/flyspell-correct-all ()
    "Correct all words, one by one"
    (flyspell-correct-at-point) (consult-flyspell))
  (defun duy/flyspell-delete-all-overlays ()
    "Delete all flyspell checks in buffer."
    (interactive)
    (flyspell-delete-all-overlays))
  (setq consult-flyspell-select-function 'duy/flyspell-correct-all)
  (leader-keys
    "s"   '(nil                              :wk "Spell check")
    "s D" '(ispell-change-dictionary         :wk "Change dictionary")
    "s r" '(duy/flyspell-region              :wk "Flyspell region")
    "s b" '(duy/flyspell-buffer              :wk "Flyspell buffer")
    "s w" '(flyspell-correct-at-point        :wk "Flyspell word and correct")
    "s B" '(duy/flyspell-delete-all-overlays :wk "Delete spell check buffer")))
#+end_src

* Version control

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :config
  (leader-keys
    "g"   '(:ignore t                 :wk "Git")
    "g s" '(magit                     :wk "Magit status")
    "g m" '(activate-smerge-mode/body :wk "Smerge")))
#+end_src

#+begin_src emacs-lisp
(defhydra activate-smerge-mode ()
  "Smerge mode"
  ("j" smerge-next "next")
  ("k" smerge-prev "prev")
  ("u" smerge-keep-upper "keep upper")
  ("l" smerge-keep-lower "keep lower")
  ("c" smerge-keep-current "keep current")
  ("h" smerge-refine "highlight")
  ("d" smerge-kill-current "delete current")
  ("a" smerge-keep-all "keep all")
  ("b" smerge-keep-base "keep base")
  ("q" nil "quit"))
#+end_src

* Org mode

** Basic setup

#+begin_src emacs-lisp
(defun duy/org-mode-setup ()
  (variable-pitch-mode 1)
  (visual-line-mode 1)
  (evil-org-mode 1)
  (display-line-numbers-mode 0)
  (setq flyspell-generic-check-word-predicate 'org-mode-flyspell-verify)  ;; Don't spell check src blocks
  (setq-local corfu-auto nil))  ;; Don't auto complete in org-buffers (to avoid org-roam link inserts)
#+end_src

#+begin_src emacs-lisp
(use-package org
  :straight t
  :init
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
  (with-eval-after-load 'flycheck
    (flycheck-add-mode 'proselint 'org-mode))
  ;; Change bullets to actual bullets
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.3))
  :custom
  (org-confirm-babel-evaluate nil)     ; Do not ask for confirmation when evaluating src blocks
  (org-catch-invisible-edits 'show)    ; When making invisible edits, show the location of the edit
  (org-ellipsis " ▼ ")
  (org-src-fontify-natively t)         ; Fontify code in src blocks
  (org-edit-src-content-indentation 2) ; Indentation within the src blocks
  (org-startup-indented t)             ; Org headings are indented, as is the text within the headings
  (org-hide-leading-stars nil)
  (org-src-preserve-indentation t)
  (org-hide-emphasis-markers t)        ; Hide markers around emphasised word (e.g. *bold*, /italic/ etc.)
  (org-adapt-indentation t)
  (org-structure-template-alist '(("a" . "export ascii")
                                  ("c" . "center")
                                  ("C" . "comment")
                                  ("e" . "example")
                                  ("E" . "export")
                                  ("l" . "export latex")
                                  ("py" . "src python")
                                  ("ru" . "src rust")
                                  ("sh" . "src h")
                                  ("q" . "quote")
                                  ("s" . "src")
                                  ("v" . "verse")
                                  ("el" . "src emacs-lisp")
                                  ("d" . "definition")
                                  ("t" . "theorem")))
  (org-clock-mode-line-total 'today)
  :custom-face
  (org-headline-done ((t (:inherit 'shadow :strike-through t))))
  (org-agenda-done ((t (:inherit 'shadow))))
  (org-image-actual-width (/ (display-pixel-width) 2))
 ;; (org-block-begin-line ((nil (:inherit 'fixed-pitch))))
  :hook
  (org-mode-hook . duy/org-mode-setup)
  (org-agenda-finalize-hook . (lambda () (display-line-numbers-mode 0)))
  ;; Prepend org-mode-line-string to global-mode-string when clocking in
  (org-clock-in-hook . (lambda ()
                         (delq 'org-mode-line-string global-mode-string)  ; Delete first as org-clock-in appends it automatically
                         (setq global-mode-string (add-to-list 'global-mode-string 'org-mode-line-string))
                         (setq global-mode-string (add-to-list 'global-mode-string " "))))  ;; global-mode-string should always start with an empty space
  ;; Remove the empty space added during clock in when clocking out
  ((org-clock-out-hook org-clock-cancel-hook). (lambda ()
                                                 (setq global-mode-string (delete " " global-mode-string))))
  (kill-emacs-hook . org-save-all-org-buffers)
  :bind
  (:map org-mode-map
        ("C-M-h" . org-shiftleft)
        ("C-M-l" . org-shiftright))
  :config
  (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
  (require 'org-habit)
  (require 'org-tempo)
  (leader-keys
    "o"   '(:ignore t   :wk "Org")
    "a"   '(org-agenda  :wk "Agenda")
    "c"   '(org-capture :wk "Capture")
    "C"   '(org-capture :wk "Capture"))
  (local-leader-keys
    :keymaps 'org-mode-map
    "I" '(org-clock-in      :wk "Clock in")
    "O" '(org-clock-out     :wk "Clock out")
    "C" '(org-clock-cancel  :wk "Clock cancel")))
#+end_src

** Capture templates

#+begin_src emacs-lisp
(if (string= system-name "Duys-MBP.home")
    (setq inbox-file "~/org-roam-notes/20220101143145-inbox.org"
          general-task-file "~/org-roam-notes/20220101143545-tasks.org")
  (if (string= system-name "NL5CG1462QH6")
      (setq inbox-file "~/org-roam-notes/20220522180401-inbox.org"
            general-task-file "~/org-roam-notes/20220522181915-general_tasks.org")
    (setq inbox-file nil)))

(setq org-capture-templates
      '(("i" "Inbox" plain (file inbox-file)
         "* TODO %?\n%U\n" :clock-in nil :clock-resume t)
        ("t" "Today" plain (file general-task-file)
         "* TODO %?\n SCHEDULED: %t\n%U\n" :clock-in nil :clock-resume t)
        ("m" "Mail" entry (file inbox-file)
         "* TODO %:from: %a %?\n%U\n" :clock-in nil :clock-resume t)
        ))
#+end_src

** Org bullet

#+begin_src emacs-lisp
  (use-package org-bullets
    :straight t)

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org appear

Org-appear shows the emphasis markers when your cursor is on the text, even if ~org-hide-emphasis-markers~ is set.

#+begin_src emacs-lisp
(use-package org-appear
  :straight t
  :hook (org-mode-hook . org-appear-mode))
#+end_src

** Org roam

#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/org-roam-notes")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :bind (:map org-mode-map
              ("C-M-i" . completion-at-point)
              :map org-roam-dailies-map
              ("Y" . org-roam-dailies-capture-yesterday)
              ("T" . org-roam-dailies-capture-tomorrow))
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (setq org-roam-node-display-template #("${title:*} ${tags:40}" 11 21
                                         (face org-tag)))
  (org-roam-db-autosync-mode)
  (leader-keys
    "n"   '(:ignore t              :wk "Roam")
    "n l" '(org-roam-buffer-toggle :wk "Buffer toggle")
    "n f" '(org-roam-node-find     :wk "Find")
    "n i" '(org-roam-node-insert   :wk "Insert")
    "n t" '(org-roam-tag-add       :wk "Add tag")
    "n T" '(org-roam-tag-remove    :wk "Remove tag")
    "n d" '(org-roam-dailies-map   :wk "Dailies")))
#+end_src

** Consult for org-roam

#+begin_src emacs-lisp
(use-package consult-org-roam
  :straight t
  :init
  (consult-org-roam-mode 1)
  :config
  (leader-keys
    "n s" '(consult-org-roam-search :wk "Search in notes")))
#+end_src

* Org agenda (using org-roam)

** Helper functions

This setup primarily follows the setup from d12frosted's [[https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html][blog]].

*** Vulpea

Vulpea is a package written by d12frosted with additional functions for org and org-roam. See also [[https://github.com/d12frosted/vulpea][here]].

#+begin_src emacs-lisp
(use-package vulpea
  :straight t)
#+end_src

*** s.el

s.el is an emacs string manipulation package.

#+begin_src emacs-lisp
(use-package s
  :straight t)
#+end_src

*** Dynamic org-agenda

- Update nodes with "project" tag if it has a TODO item.
- Set agenda files to nodes which have a "project" tag.

#+begin_src emacs-lisp
(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (seq-find                                 ; (3)
   (lambda (type)
     (eq type 'todo))
   (org-element-map                         ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (org-element-property :todo-type h)))))

(defun vulpea-project-update-tag ()
  "Update PROJECT tag in the current buffer."
  (when (and (not (active-minibuffer-window))
             (vulpea-buffer-p))
    (save-excursion
      (goto-char (point-min))
      (let* ((tags (vulpea-buffer-tags-get))
             (original-tags tags))
        (if (vulpea-project-p)
            (setq tags (cons "project" tags))
          (setq tags (remove "project" tags)))

        ;; cleanup duplicates
        (setq tags (seq-uniq tags))

        ;; update tags if changed
        (when (or (seq-difference tags original-tags)
                  (seq-difference original-tags tags))
          (apply #'vulpea-buffer-tags-set tags))))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun vulpea-project-files ()
  "Return a list of note files containing 'project' tag." ;
  (seq-uniq
   (seq-map
    #'car
    (org-roam-db-query
     [:select [nodes:file]
              :from tags
              :left-join nodes
              :on (= tags:node-id nodes:id)
              :where (like tag (quote "%\"project\"%"))]))))

(defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (vulpea-project-files)))

(add-hook 'find-file-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-project-update-tag)

(advice-add 'org-agenda :before #'vulpea-agenda-files-update)
#+end_src

** Org agenda settings

*** Show agenda in new tab

#+begin_src emacs-lisp
(setq org-agenda-window-setup 'other-tab)
#+end_src

*** Fix title org-roam file in todo list

#+begin_src emacs-lisp
(setq org-agenda-prefix-format
      '((agenda . " %i %(vulpea-agenda-category 12)%?-12t% s")
        (todo . " %i %(vulpea-agenda-category 12) ")
        (tags . " %i %(vulpea-agenda-category 12) ")
        (search . " %i %(vulpea-agenda-category 12) ")))

(defun vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:

- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (vulpea-buffer-prop-get "title"))
         (category (org-get-category))
         (result
          (or (if (and
                   title
                   (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))
#+end_src

*** org-super-agenda

Use org-super-agenda to group TODOs in agenda view.

#+begin_src emacs-lisp
(use-package org-super-agenda
  :straight t
  :config
  (add-hook 'org-agenda-mode-hook 'org-super-agenda-mode)
  (setq org-super-agenda-header-prefix nil)
  (setq org-super-agenda-header-map (make-sparse-keymap)))

#+end_src

*** TODOs, tags etc.

Set todo keywords, tags etc.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w!)" "HOLD(h!)" "|" "CANCELLED(c)")))

(setq org-todo-keyword-faces
      '(("TODO" . '(org-todo))
        ("NEXT" . '(bold org-todo))
        ("WAITING" . '(shadow org-todo))))

(setq org-log-done 'time
      org-log-into-drawer t
      org-log-state-notes-insert-after-drawers nil)

(setq org-tag-alist (quote (("@reading" . ?r)
                            ("@coding" . ?c)
                            ("@writing" . ?w)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            ("focus" . ?f)
                            (:newline)
                            ("WAITING" . ?W)
                            ("HOLD" . ?H))))

(setq org-fast-tag-selection-single-key nil)
#+end_src

*** Archiving

Function to archive all done task in current org agenda/file.

#+begin_src emacs-lisp
(defun duy/org-archive-done-tasks-agenda ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'agenda))

(defun duy/org-archive-done-tasks-file ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file))
#+end_src

*** Group TODOs by title

Function to automatically group TODOs by title.
#+begin_src emacs-lisp
(org-super-agenda--def-auto-group title "title of org file"
  :key-form (org-super-agenda--when-with-marker-buffer (org-super-agenda--get-marker item)
              (org-roam-db--file-title))
  :header-form key)
#+end_src

*** Layout of agenda

#+begin_src emacs-lisp
(setq duy/agenda-group-main
      '((:discard (:scheduled today))
        (:discard (:scheduled past))
        (:name none
               :priority>= "C")
        (:name "Currently focusing on\n"
               :tag "focus")
        (:name "Next actions\n"
               :todo "NEXT")
        (:name "Waiting on\n"
               :todo "WAITING")
        (:discard (:anything t))))

(setq duy/agenda-group-today
      '((:name "Today"
               :time-grid t
               :date today
               :scheduled today)
        (:name "Upcoming deadlines"
               :deadline future)))

(setq duy/agenda-group-backlog
      '((:discard (:tag "refile"))
        (:auto-title t)))  ;; defined with org-super-agenda--def-auto-group

(setq duy/agenda-group-backlog-unscheduled
      '((:discard (:tag "refile"))
        (:discard (:scheduled t))
        (:discard (:deadline today))
        (:auto-title t))) ;; defined with org-super-agenda--def-auto-group

(setq duy/agenda-group-inbox
      '((:name none
               :tag "refile")
        (:discard (:anything t))))

(setq org-agenda-custom-commands
      `((" " "Agenda"
         ((todo "" ((org-agenda-overriding-header "Important tasks\n")
                    (org-super-agenda-groups duy/agenda-group-main)))
          (agenda "" ((org-agenda-span 1)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-scheduled-past-days 0)
                      ;; We don't need the `org-agenda-date-today'
                      ;; highlight because that only has a practical
                      ;; utility in multi-day views.
                      (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                      (org-agenda-format-date "%A %-e %B %Y")
                      (org-agenda-overriding-header "\nToday's agenda\n")))
          (agenda "" ((org-agenda-start-on-weekday nil)
                      (org-agenda-start-day "+1d")
                      (org-agenda-span 3)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nNext three days\n")))
          (agenda "" ((org-agenda-time-grid nil)
                      (org-agenda-start-on-weekday nil)
                      ;; We don't want to replicate the previous section's
                      ;; three days, so we start counting from the day after.
                      (org-agenda-start-day "+4d")
                      (org-agenda-span 14)
                      (org-agenda-show-all-dates nil)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-entry-types '(:deadline))
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")))
          (todo "" ((org-agenda-overriding-header "Inbox\n")
                    (org-super-agenda-groups duy/agenda-group-inbox)
                    (org-agenda-block-separator ?-)))
          (todo "TODO" ((org-agenda-overriding-header "Backlog")
                        (org-super-agenda-groups duy/agenda-group-backlog-unscheduled)
                        (org-agenda-block-separator "")))))
        ("b" "Backlog"
         ((todo "TODO" ((org-agenda-overriding-header "Backlog")
                        (org-super-agenda-groups duy/agenda-group-backlog)))))))
#+end_src

*** org-agenda tags display settings

Align all tags at the right border of the agenda window:

#+begin_src emacs-lisp
  (defun duy/realign-agenda-tags ()
    "Put the agenda tags at the right border of the agenda window."
    (setq org-agenda-tags-column (- 5 (window-width)))
    (org-agenda-align-tags))

  (add-hook 'org-agenda-finalize-hook 'duy/realign-agenda-tags)
#+end_src

Hide the =project= tag in org-agenda, since by definition in our setup all items will have the tag:

#+begin_src emacs-lisp
(setq org-agenda-hide-tags-regexp (regexp-opt '("project")))
#+end_src

** Inbox management
 
*** Function to process inbox item

#+begin_src emacs-lisp
(defun duy/org-agenda-process-inbox-item ()
  "Process a single item in the org-agenda."
  (interactive)
  (org-with-wide-buffer
   (org-agenda-set-tags)
   ;; (org-agenda-priority)
   (org-agenda-refile nil nil t)))
#+end_src

*** Functions to process inbox

#+begin_src emacs-lisp
(defun duy/bulk-process-entries ()
  (if (not (null org-agenda-bulk-marked-entries))
      (let ((entries (reverse org-agenda-bulk-marked-entries))
            (processed 0)
            (skipped 0))
        (dolist (e entries)
          (let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
            (if (not pos)
                (progn (message "Skipping removed entry at %s" e)
                       (cl-incf skipped))
              (goto-char pos)
              (let (org-loop-over-headlines-in-active-region) (funcall 'duy/org-agenda-process-inbox-item))
              ;; `post-command-hook' is not run yet.  We make sure any
              ;; pending log note is processed.
              (when (or (memq 'org-add-log-note (default-value 'post-command-hook))
                        (memq 'org-add-log-note post-command-hook))
                (org-add-log-note))
              (cl-incf processed))))
        (org-agenda-redo)
        (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
        (message "Acted on %d entries%s%s"
                 processed
                 (if (= skipped 0)
                     ""
                   (format ", skipped %d (disappeared before their turn)"
                           skipped))
                 (if (not org-agenda-persistent-marks) "" " (kept marked)")))))

(defun duy/org-process-inbox ()
  "Called in org-agenda-mode, processes all inbox items."
  (interactive)
  (org-agenda-bulk-mark-regexp "refile:")
  (duy/bulk-process-entries))
#+end_src

*** Org refile settings

Refile targets are set to all files in the org-roam-notes folder.

#+begin_src emacs-lisp
(setq myroamfiles (directory-files org-roam-directory t "org$"))

;; -------- refile settings -----
(setq org-refile-targets '((org-agenda-files :maxlevel . 5) (myroamfiles :maxlevel . 5)))
(setq org-refile-use-outline-path 'file)  ;; 'file or nil
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

#+begin_src emacs-lisp
(defun vulpea-roam-files-update (&rest _)
  "Update the value of `myroamfiles'."
  (setq myroamfiles (directory-files org-roam-directory t "org$")))

(advice-add 'org-agenda :before #'vulpea-roam-files-update)
#+end_src

Some ideas for the future:

- Project nodes have "project" tags, which are added by myself.
- Nodes have "task" tags based on existence of TODO items.
- Org agenda items are nodes with a "task" tag.
- Refile targets are nodes with a "project" or "task" tag.
  
** Archiving

Function to archive all done task in current org agenda/file.

#+begin_src emacs-lisp
(defun duy/org-archive-done-tasks-agenda ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'agenda))

(defun duy/org-archive-done-tasks-file ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file))
#+end_src

** Update org-agenda keybindings

*** General agenda bindings

#+begin_src emacs-lisp
(general-define-key
 :states '(normal motion override)
 :keymaps '(org-agenda-mode-map)
 "r"   '(:ignore t                         :wk "Refile")
 "r r" '(duy/org-agenda-process-inbox-item :wk "Refile item")
 "r i" '(duy/org-process-inbox             :wk "Process inbox")
 "d a" '(duy/org-archive-done-tasks-agenda :wk "Archive all done tasks"))
#+end_src

*** org-calendar bindings

#+begin_src emacs-lisp
(defmacro my-org-in-calendar (command)
  (let ((name (intern (format "my-org-in-calendar-%s" command))))
    `(progn
       (defun ,name ()
         (interactive)
         (org-eval-in-calendar '(call-interactively #',command)))
       #',name)))

(general-def org-read-date-minibuffer-local-map
  "h" (my-org-in-calendar calendar-backward-day)
  "l" (my-org-in-calendar calendar-forward-day)
  "k" (my-org-in-calendar calendar-backward-week)
  "j" (my-org-in-calendar calendar-forward-week)
  "C-h" (my-org-in-calendar calendar-backward-month)
  "C-l" (my-org-in-calendar calendar-forward-month)
  "C-k" (my-org-in-calendar calendar-backward-year)
  "C-j" (my-org-in-calendar calendar-forward-year))
#+end_src

* Writing

** Thesaurus

#+begin_src emacs-lisp
(use-package powerthesaurus
  :straight t
  :config
  (leader-keys
    "s d" '(powerthesaurus-lookup-dwim :wk "Powerthesaurus")))
#+end_src

** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :straight t
  :defer t
  :diminish
  :custom
  (olivetti-body-width 0.67)
  (olivetti-minimum-body-width 80)
  (olivetti-recall-visual-line-mode-entry-state t)
  (olivetti-style "fancy")
  :custom-face
  (olivetti-fringe ((t (:background "#122")))))
#+end_src

** Logos

#+begin_src emacs-lisp
(use-package logos
  :straight t
  :init
  (setq logos-outlines-are-pages t)
  (setq-default logos-olivetti t)
  (let ((map global-map))
    (define-key map [remap narrow-to-region] #'logos-narrow-dwim)
    (define-key map [remap forward-page] #'logos-forward-page-dwim)
    (define-key map [remap backward-page] #'logos-backward-page-dwim)
    (define-key map (kbd "<f9>") #'logos-focus-mode))
  :config
  (local-leader-keys
    :map 'logos-focus-mode-map
    "n" '(:keymap narrow-map :wk "Narrow")))
#+end_src

* Pulsar

#+begin_src emacs-lisp
(use-package pulsar
  :straight (:host github :repo "protesilaos/pulsar")
  :init
  (pulsar-global-mode 1)
  (setq pulsar-face 'pulsar-magenta)
  (add-to-list 'pulsar-pulse-functions 'ace-window)
  (add-to-list 'pulsar-pulse-functions 'tab-bar-select-tab)
  (add-to-list 'pulsar-pulse-functions 'evil-scroll-line-to-center)
  (add-to-list 'pulsar-pulse-functions 'evil-scroll-line-to-top)
  (add-to-list 'pulsar-pulse-functions 'evil-scroll-line-to-bottom)
  (add-to-list 'pulsar-pulse-functions 'evil-scroll-down)
  (add-to-list 'pulsar-pulse-functions 'evil-scroll-up)
  (add-to-list 'pulsar-pulse-functions 'evil-avy-goto-line)
  (add-to-list 'pulsar-pulse-functions 'evil-avy-goto-char)
  (add-to-list 'pulsar-pulse-functions 'evil-avy-goto-char-2)
  (add-to-list 'pulsar-pulse-functions 'evil-avy-goto-char-timer)
  (add-function :after after-focus-change-function (lambda () (if (frame-focus-state) (pulsar-pulse-line))))
  :hook
  (consult-after-jump-hook . pulsar-recenter-middle)
  (consult-after-jump-hook . pulsar-reveal-entry)
  (logos-page-motion-hook . pulsar-recenter-middle)
  ;; (window-configuration-change-hook . pulsar-pulse-line)  ;; Pulses when scrolling through org-agenda and when a pop-up (e.g. corfu or which-key) shows/changes
  ;; (window-selection-change-functions . pulsar-pulse-line)  ;; Doesn't pulse when switching buffer in a single window
  ;; (window-state-change-functions . pulsar-pulse-line) ;; Doesn't pulse when switching buffer in a single window
  ;; (window-state-change-hook . pulsar-pulse-line)  ;; Pulses on blank lines in org-agenda and when a pop-up (e.g. corfu or which-key) shows/changes
  ;; (window-buffer-change-functions . pulsar-pulse-line) ;; Doesn't pulse when switching buffer in a single window
  (buffer-list-update-hook . pulsar-pulse-line)  ;; Pulses when which-key pop-up shows
  )
#+end_src

* Web browsing

Open URLs in qutebrowser:

#+begin_src emacs-lisp
(use-package emacs
  :ensure-system-package qutebrowser
  :config
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "qutebrowser"))
#+end_src

* Pandoc

* Programming

** Project management

#+begin_src emacs-lisp
(use-package project
  :straight t
  :init
  (setq project-switch-commands '((project-find-file "Find file" "f")
                                  (project-find-dir "Find dir" "d")
                                  (project-dired "Dired" "D")
                                  (consult-ripgrep "ripgrep" "g")
                                  (magit-status "Magit" "m")))
  :config
  (leader-keys
    "p"   '(nil                    :wk "Project")
    "p p" '(project-switch-project :wk "Switch project")
    "p f" '(project-find-file      :wk "Find file")
    "p d" '(project-find-dir       :wk "Find dir")
    "p D" '(project-dired          :wk "Dired project root")
    "p k" '(project-kill-buffers   :wk "Kill project buffers")
    "p b" '(consult-project-buffer :wk "Switch buffer")
    "p g" '(consult-ripgrep        :wk "Consult ripgrep")))
#+end_src

*** Start vterm in project root

Current the function below is unused as we are using ~vterm-toggle~ with ~vterm-toggle-project-root~ and ~vterm-toggle-scope~.

#+begin_src emacs-lisp
;; (defun duy/project-vterm ()
;;   "Start an inferior shell in the current project's root directory.
;; If a buffer already exists for running a shell in the project's root,
;; switch to it.  Otherwise, create a new shell buffer.
;; With \\[universal-argument] prefix arg, create a new inferior shell buffer even
;; if one already exists."
;;   (interactive)
;;   (require 'comint)
;;   (let* ((default-directory (project-root (project-current t)))
;;          (default-project-shell-name (project-prefixed-buffer-name "vterm"))
;;          (shell-buffer (get-buffer default-project-shell-name)))
;;     (if (and shell-buffer (not current-prefix-arg))
;;         (if (comint-check-proc shell-buffer)
;;             (pop-to-buffer shell-buffer (bound-and-true-p display-comint-buffer-action))
;;           (vterm shell-buffer))
;;       (vterm (generate-new-buffer-name default-project-shell-name)))))
#+end_src

** direnv and envrc for setting local virtual environment variables

Ensure =direnv= is installed via your OS package manager.

#+begin_src emacs-lisp
(use-package envrc
  :straight t
  :init
  (envrc-global-mode 1))
#+end_src

** LSP

*** eglot

#+begin_src emacs-lisp
(use-package eglot
  :straight t
  :defer t
  :after consult
  :hook (python-mode-hook . eglot-ensure)
  :init
  (define-key evil-normal-state-map (kbd "M-.") nil)
  (define-key evil-normal-state-map (kbd "C->") 'evil-repeat-pop-next)
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)
  :config
  (leader-keys
    "l"   '(nil                   :wk "Lsp")
    "l e" '(consult-flymake       :wk "Error diagnostics")
    "l d" '(xref-find-definitions :wk "Find definition")
    "l r" '(xref-find-references  :wk "Find references")))
#+end_src

*** consult-eglot

#+begin_src emacs-lisp
(use-package consult-eglot
  :straight t
  :after eglot consult
  :config
  (leader-keys
    "l s" '(consult-eglot-symbols :wk "Search symbols")))
#+end_src

** Python

#+begin_src emacs-lisp
(use-package python
  :straight t
  :custom
  (python-indent-guess-indent-offset-verbose nil))
#+end_src

*** Poetry

Using poetry to manage python environments for coding projects. This is important for ~eglot~ to use the correct environment for linting.

Alternatives include [[https://github.com/jorgenschaefer/pyvenv][pyvenv.el]], [[https://github.com/pythonic-emacs/pyenv-mode][pyenv-mode.el]], [[https://github.com/necaris/conda.el][conda.el]] and [[https://github.com/pythonic-emacs/anaconda-mode][anaconda-mode.el]]. pyenv-mode can be used in conjunction with projectile, see also [[https://www.reddit.com/r/emacs/comments/tenq8z/help_using_lspmodeeglot_for_python_and_virtualenvs/][here]].

#+begin_src emacs-lisp
(use-package poetry
  :straight t
  :defer t)
  ;; :config
  ;; ;; Checks for the correct virtualenv. Better strategy IMO because the default
  ;; ;; one is quite slow.
  ;; ;; (setq poetry-tracking-strategy 'switch-buffer)
  ;; (setq poetry-tracking-strategy 'post-command)
  ;; :hook (python-mode-hook . poetry-tracking-mode))
#+end_src

# Note: ~poetry-tracking-strategy 'switch-buffer~ makes poetry check venv even when previewing buffers, so changed it back to the default setting now.

Currently using in combination with =direnv= ([[https://github.com/direnv/direnv/wiki/Python][setup instructions]]).

*** Blacken

#+begin_src emacs-lisp
(use-package blacken
  :straight t
  :defer t
  :custom
  (blacken-allow-py36 t)
  (blacken-skip-string-normalization t)
  :hook (python-mode-hook . blacken-mode))
#+end_src

*** Numpydoc

#+begin_src emacs-lisp
(use-package numpydoc
  :straight t
  :defer t
  :custom
  (numpydoc-insert-examples-block nil)
  (numpydoc-template-long nil)
  :config
  (local-leader-keys
    :keymaps 'python-mode-map
    "n" '(numpydoc-generate :wk "Generate docstring")))
#+end_src

*** conda

Although I prefer to use poetry/pyenv to manage my Python coding projects and environments, on most of my computers I also have conda installed. There are a few use cases where this makes sense:

- Other people I work with use conda only and not poetry.
- I'm trying to clone a repository which uses conda to manage dependencies.
- I need to install a non-python package via conda.

Furthermore, poetry is actually set up in a way to be able to use with conda as an environment manager (see [[https://github.com/python-poetry/poetry/blob/master/src/poetry/utils/env.py#L675][here]]). See also more info on this [[https://stackoverflow.com/questions/70851048/does-it-make-sense-to-use-conda-poetry][StackOverflow post]].

#+begin_src emacs-lisp
(use-package conda
  :straight t
  :defer t)
#+end_src

*** Python development workflow with Poetry

Currenly I prefer the following workflow (which seems to work... most of the time):

1) Create a new poetry project via ~poetry init~ or ~poetry new~.
2) ~git init~ the project root folder.
3) Create a =.envrc= file with ~layout pyenv {version}~ and ~layout poetry~ in it.
4) Begin to add dependencies via ~poetry add~ (~-D~ switch for developer dependencies).
5) Create a ~pyrightconfig.json~ in the project root, and set the =venvPath= and =venv= variables accordingly.
   
This has the following benefits compared to other things I tried:
- Don't need to use ~poetry-tracking-mode~, which can be slow in my experience.
- Creates replicable configs across machines.

** Rust

#+begin_src emacs-lisp
(use-package rustic
  :straight t
  :ensure-system-package rustup
  :config
  (setq rustic-format-on-save t)
  (setq rustic-lsp-client 'eglot))
#+end_src

** Jupyter

#+begin_src emacs-lisp
(use-package jupyter
  :straight t
  :ensure-system-package jupyter
  :bind (:map jupyter-repl-mode-map 
              ("C-j" . 'jupyter-repl-forward-cell)
              ("C-k" . 'jupyter-repl-backward-cell))
  :init
  (org-babel-do-load-languages
   'org-babel-load-languages            ; Languages allowed to run in Org Src blocks
   (append org-babel-load-languages '((jupyter . t))))
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py")
                                                       (:kernel . "python3")))
  (org-babel-jupyter-override-src-block "python"))
#+end_src

See also [[https://orgmode.org/manual/Using-Header-Arguments.html][here]] for more info on how to use ~header-args~ properties in org files.

** AutoHotKey

#+begin_src emacs-lisp
(when duy/is-wsl
  (use-package ahk-mode
    :straight t))
#+end_src

* PDF

#+begin_src emacs-lisp
(defun duy/pdf-occur-view-next ()
  "View next pdf-occur match from pdf-occur-buffer"
  (interactive)
  (evil-next-visual-line)
  (pdf-occur-view-occurrence))


(defun duy/pdf-occur-view-prev ()
  "View previous pdf-occur match from pdf-occur-buffer"
  (interactive)
  (evil-previous-visual-line)
  (pdf-occur-view-occurrence))
#+end_src

#+begin_src emacs-lisp
(use-package pdf-tools
  :straight t
  :init
  (pdf-tools-install)
  :hook
  (pdf-view-mode-hook . evil-collection-pdf-setup))

(use-package pdf-occur
  :straight nil
  :after pdf-tools
  :bind (:map pdf-occur-buffer-mode-map
              ("C-<return>" . pdf-occur-view-occurrence)
              ("C-j" . duy/pdf-occur-view-next)
              ("C-k" . duy/pdf-occur-view-prev)
              :map pdf-view-mode-map
              ("C-s" . pdf-occur)))

;; pdf-view-restore remembers last position in pdf before closing

(use-package pdf-view-restore
  :straight t
  :after pdf-tools
  :hook
  (pdf-view-mode-hook . pdf-view-restore-mode)
  :custom
  (pdf-view-restore-file-name (expand-file-name ".pdf-view-restore" user-emacs-directory))) 
#+end_src

* Ledger

#+begin_src emacs-lisp
(when (string= system-name "Duys-MBP.home")
  (use-package ledger-mode
    :straight t
    :ensure-system-package ledger
    :custom
    (ledger-reports '(("Balance (EUR)" "%(binary) -f %(ledger-file) bal --exchange EUR --price-db .pricedb Assets Liabilities")
                      ("Balance (MV)" "%(binary) -f %(ledger-file) bal -V --price-db .pricedb Assets Liabilities")
                      ("bal" "%(binary) -f %(ledger-file) bal --price-db .pricedb")
                      ("reg" "%(binary) -f %(ledger-file) reg --price-db .pricedb")
                      ("Monthly averages" "%(binary) -f %(ledger-file) reg --price-db .pricedb -MA")))
    :init
    (add-to-list 'auto-mode-alist '("\\.pricedb\\'" . ledger-mode))
    (defun duy/disable-line-numbers ()
      (display-line-numbers-mode 0))
    ;; (advice-add 'ledger-report-edit-report :before #'so-long-revert)
    ;; (advice-add 'ledger-report-edit-report :after #'so-long-minor-mode)
    :hook
    (ledger-mode-hook . ledger-flymake-enable)
    ;; (ledger-report-mode-hook . so-long-minor-mode)
    ;; (ledger-report-after-report-hook . so-long-minor-mode)
    (ledger-report-after-report-hook . duy/disable-line-numbers)
    :config
    (local-leader-keys
      :keymaps '(ledger-mode-map ledger-report-mode-map)
      "a" '(ledger-add-transaction    :wk "Add transaction")
      "e" '(ledger-report-edit-report :wk "Edit report")
      "g" '(ledger-report-goto        :wk "Go to report")
      "s" '(ledger-report-save        :wk "Save report")
      "r" '(ledger-report             :wk "Report"))
    (general-define-key
     :states  '(normal motion override)
     :keymaps '(ledger-report-mode-map)
     "q"  'ledger-report-quit
     "e"  'ledger-report-edit-report
     "r"  'ledger-report-redo
     "s"  'duy/so-long-toggle)
    (general-define-key
     :states  '(normal motion override)
     :keymaps '(ledger-reconcile-mode-map)
     "q"  'ledger-reconcile-quit)))
#+end_src

* Email

#+begin_src emacs-lisp
(require 'mail-config)
#+end_src

